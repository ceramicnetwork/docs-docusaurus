"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6381],{80032:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var t=s(11527),i=s(63883);const a={},r="Ceramic HTTP API",l={id:"protocol/js-ceramic/guides/ceramic-clients/javascript-clients/http-api",title:"Ceramic HTTP API",description:"---",source:"@site/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/http-api.md",sourceDirName:"protocol/js-ceramic/guides/ceramic-clients/javascript-clients",slug:"/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/http-api",permalink:"/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/http-api",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"protocol",previous:{title:"Ceramic HTTP client",permalink:"/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http"},next:{title:"Queries",permalink:"/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/queries"}},c={},o=[{value:"When to use the HTTP API",id:"when-to-use-the-http-api",level:2},{value:"Streams API",id:"streams-api",level:2},{value:"Loading a stream",id:"loading-a-stream",level:3},{value:"Example",id:"example",level:4},{value:"Creating a Stream",id:"creating-a-stream",level:3},{value:"Request body fields:",id:"request-body-fields",level:4},{value:"<strong>Example</strong>",id:"example-1",level:4},{value:"Multiqueries API",id:"multiqueries-api",level:2},{value:"Querying multiple streams",id:"querying-multiple-streams",level:3},{value:"Request body fields:",id:"request-body-fields-1",level:4},{value:"Example",id:"example-2",level:4},{value:"<strong>Commits API</strong>",id:"commits-api",level:2},{value:"Getting all commits in a stream",id:"getting-all-commits-in-a-stream",level:3},{value:"Example",id:"example-3",level:4},{value:"Applying a new commit to stream",id:"applying-a-new-commit-to-stream",level:3},{value:"Request body fields:",id:"request-body-fields-2",level:4},{value:"Example",id:"example-4",level:4},{value:"Pins API",id:"pins-api",level:2},{value:"Adding to pinset",id:"adding-to-pinset",level:3},{value:"Example",id:"example-5",level:4},{value:"Removing from pinset",id:"removing-from-pinset",level:3},{value:"Example",id:"example-6",level:4},{value:"Listing streams in pinset",id:"listing-streams-in-pinset",level:3},{value:"Example",id:"example-7",level:4},{value:"Checking inclusion in pinset",id:"checking-inclusion-in-pinset",level:3},{value:"Example",id:"example-8",level:4},{value:"Node Info APIs",id:"node-info-apis",level:2},{value:"Supported blockchains for anchoring",id:"supported-blockchains-for-anchoring",level:3},{value:"Example",id:"example-9",level:4},{value:"Health check",id:"health-check",level:3},{value:"Example",id:"example-10",level:4},{value:"Node status",id:"node-status",level:3},{value:"Example",id:"example-11",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"ceramic-http-api",children:"Ceramic HTTP API"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:'The Ceramic HTTP API is the standard lowest-level communication protocol between\nclients and nodes on the Ceramic network. It allows client applications to\nmanually make REST HTTP requests to a remote Ceramic node to send transactons,\nretrieve data, and "pin" data to make it available.'}),"\n",(0,t.jsxs)(n.p,{children:["If you are building an application, you will usually interact with Ceramic using\na client API, such as the\n",(0,t.jsx)(n.a,{href:"./ceramic-http",children:"JS HTTP Client"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"when-to-use-the-http-api",children:"When to use the HTTP API"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"The HTTP API is useful if you have a special use case where you directly want to\nmake manual HTTP requests, or you want to implement an HTTP client in a new\nlanguage."}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Gateway mode"})}),(0,t.jsxs)(n.p,{children:["Some HTTP API methods will not be available if the Ceramic node you are using runs in ",(0,t.jsx)(n.em,{children:"gateway mode"}),". This option disables writes, which is useful when exposing your node to the internet. ",(0,t.jsx)(n.strong,{children:"API methods that are disabled when running in gateway mode will be clearly marked."})]})]}),"\n",(0,t.jsx)(n.h2,{id:"streams-api",children:"Streams API"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"stream"})," endpoint is used to create new streams and load streams from the\nnode using a StreamID or genesis content."]}),"\n",(0,t.jsx)(n.h3,{id:"loading-a-stream",children:"Loading a stream"}),"\n",(0,t.jsx)(n.p,{children:"Load the state of a stream given its StreamID."}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"GET /api/v0/streams/:streamid\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here, ",(0,t.jsx)(n.code,{children:":streamid"})," should be replaced by the StreamID of the stream that is being requested."]}),"\n",(0,t.jsx)(n.p,{children:'=== "Response" The response body contains the following fields:'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"streamId"})," - the StreamID of the requested stream as string"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"state"})," - the state of the requested stream as ",(0,t.jsx)(n.a,{href:"https://developers.ceramic.network/reference/typescript/interfaces/_ceramicnetwork_common.StreamState.html",children:"StreamState"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:7007/api/v0/streams/kjzl6cwe1jw147r7878h32yazawcll6bxe5v92348cxitif6cota91qp68grbhm\n"})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'{\n  "streamId": "kjzl6cwe1jw147r7878h32yazawcll6bxe5v92348cxitif6cota91qp68grbhm",\n  "state": {\n    "type": 0,\n    "content": {\n      "Ceramic": "pottery"\n    },\n    "metadata": {\n      "schema": null,\n      "controllers": [\n        "did:key:z6MkfZ6S4NVVTEuts8o5xFzRMR8eC6Y1bngoBQNnXiCvhH8H"\n      ]\n    },\n    "signature": 2,\n    "anchorStatus": "PENDING",\n    "log": [{\n      "cid": "bagcqceramof2xi7kh6qblirzkbc7yulcjcticlcob6uvdrx3bexgks37ilva",\n      "type": 0\n    }],\n    "anchorScheduledFor": "12/15/2020, 2:45:00 PM"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"creating-a-stream",children:"Creating a Stream"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Disabled in gateway mode"})})}),"\n",(0,t.jsx)(n.p,{children:"Create a new stream, or load a stream from its genesis content. The genesis\ncontent may be signed, or unsigned in some cases."}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"POST /api/v0/streams\n"})}),"\n",(0,t.jsx)(n.h4,{id:"request-body-fields",children:"Request body fields:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"type"})," - the type code of the StreamType to use. Type codes for the supported stream types can be found ",(0,t.jsx)(n.a,{href:"https://github.com/ceramicnetwork/CIPs/blob/main/tables/streamtypes.csv",children:"in this table"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"genesis"})," - the genesis content of the stream (will differ per StreamType)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"opts"})," - options for the stream creation, ",(0,t.jsx)(n.a,{href:"https://developers.ceramic.network/reference/typescript/interfaces/_ceramicnetwork_common.CreateOpts.html",children:"CreateOpts"})," (optional)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.p,{children:"The response body contains the following fields:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"streamId"})," - the StreamID of the requested stream as string"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"state"})," - the state of the requested stream as ",(0,t.jsx)(n.a,{href:"https://developers.ceramic.network/reference/typescript/interfaces/_ceramicnetwork_common.StreamState.html",children:"StreamState"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-1",children:(0,t.jsx)(n.strong,{children:"Example"})}),"\n",(0,t.jsxs)(n.p,{children:["This example creates a ",(0,t.jsx)(n.code,{children:"TileDocument"})," from an unsigned genesis commit. Note that\nif the content is defined for a ",(0,t.jsx)(n.code,{children:"TileDocument"})," genesis commit, it needs to be\nsigned."]}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl http://localhost:7007/api/v0/streams -X POST -d \'{\n    "type": 0,\n    "genesis": {\n      "header": {\n        "family": "test",\n        "controllers": ["did:key:z6MkfZ6S4NVVTEuts8o5xFzRMR8eC6Y1bngoBQNnXiCvhH8H"]\n      }\n    }\n  }\' -H "Content-Type: application/json"\n'})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'{\n  "streamId": "k2t6wyfsu4pg2qvoorchoj23e8hf3eiis4w7bucllxkmlk91sjgluuag5syphl",\n  "state": {\n    "type": 0,\n    "content": {},\n    "metadata": {\n      "family": "test",\n      "controllers": [\n        "did:key:z6MkfZ6S4NVVTEuts8o5xFzRMR8eC6Y1bngoBQNnXiCvhH8H"\n      ]\n    },\n    "signature": 0,\n    "anchorStatus": "PENDING",\n    "log": [\n      {\n        "cid": "bafyreihtdxfb6cpcvomm2c2elm3re2onqaix6frq4nbg45eaqszh5mifre",\n        "type": 0\n      }\n    ],\n    "anchorScheduledFor": "12/15/2020, 3:00:00 PM"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"multiqueries-api",children:"Multiqueries API"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"multiqueries"})," endpoint enables querying multiple streams at once, as well\nas querying streams which are linked."]}),"\n",(0,t.jsx)(n.h3,{id:"querying-multiple-streams",children:"Querying multiple streams"}),"\n",(0,t.jsxs)(n.p,{children:["This endpoint allows you to query multiple StreamIDs. Along with each StreamID\nan array of paths can be passed. If any of the paths within the stream structure\ncontains a Ceramic StreamID url (",(0,t.jsx)(n.code,{children:"ceramic://<StreamID>"}),"), this linked stream\nwill also be returned as part of the response."]}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"POST /api/v0/multiqueries\n"})}),"\n",(0,t.jsx)(n.h4,{id:"request-body-fields-1",children:"Request body fields:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"queries"})," - an array of ",(0,t.jsx)(n.a,{href:"https://developers.ceramic.network/reference/typescript/interfaces/_ceramicnetwork_common.MultiQuery.html",children:"MultiQuery"})," objects"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsxs)(n.p,{children:["The response body contains a map from StreamID strings to ",(0,t.jsx)(n.a,{href:"https://developers.ceramic.network/reference/typescript/interfaces/_ceramicnetwork_common.StreamState.html",children:"StreamState"})," objects."]}),"\n",(0,t.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"First let's create three streams to query using the Ceramic cli:"}),"\n",(0,t.jsx)(n.p,{children:'=== "Request1"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'ceramic create tile --content \'{ "Document": "A" }\'\n'})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response1"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'StreamID(kjzl6cwe1jw149rledowj0zi0icd7epi9y1m5tx4pardt1w6dzcxvr6bohi8ejc)\n{\n  "Document": "A"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:'=== "Request2"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'ceramic create tile --content \'{ "Document": "B" }\'\n'})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response2"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'StreamID(kjzl6cwe1jw147w3xz3xrcd37chh2rz4dfra3imtnsni385rfyqa3hbx42qwal0)\n{\n  "Document": "B"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:'=== "Request3"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'ceramic create tile --content \'{\n    "Document": "C",\n    "link": "ceramic://kjzl6cwe1jw149rledowj0zi0icd7epi9y1m5tx4pardt1w6dzcxvr6bohi8ejc"\n}\'\n'})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response3"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'StreamID(kjzl6cwe1jw14b54pb10voc4bqh73qyu8o6cfu66hoi3feidbbj81i5rohh7kgl)\n{\n  "link": "ceramic://kjzl6cwe1jw149rledowj0zi0icd7epi9y1m5tx4pardt1w6dzcxvr6bohi8ejc",\n  "Document": "C"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now let's query them though the multiqueries endpoint:"}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl http://localhost:7007/api/v0/multiqueries -X POST -d \'{\n  "queries": [{\n    "streamId": "kjzl6cwe1jw14b54pb10voc4bqh73qyu8o6cfu66hoi3feidbbj81i5rohh7kgl",\n    "paths": ["link"]\n  }, {\n    "streamId": "kjzl6cwe1jw147w3xz3xrcd37chh2rz4dfra3imtnsni385rfyqa3hbx42qwal0",\n    "paths": []\n  }]\n}\' -H "Content-Type: application/json"\n'})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'{\n  "kjzl6cwe1jw14b54pb10voc4bqh73qyu8o6cfu66hoi3feidbbj81i5rohh7kgl": {\n    "type": 0,\n    "content": {\n      "link": "ceramic://kjzl6cwe1jw149rledowj0zi0icd7epi9y1m5tx4pardt1w6dzcxvr6bohi8ejc",\n      "Document": "C"\n    },\n    "metadata": {\n      "schema": null,\n      "controllers": [\n        "did:key:z6MkfZ6S4NVVTEuts8o5xFzRMR8eC6Y1bngoBQNnXiCvhH8H"\n      ]\n    },\n    "signature": 2,\n    "anchorStatus": "PENDING",\n    "log": [\n      {\n        "cid": "bagcqcera5nx45nccxvjjyxsq3so5po77kpqzbfsydy6yflnkt6p5tnjvhbkq",\n        "type": 0\n      }\n    ],\n    "anchorScheduledFor": "12/30/2020, 1:45:00 PM"\n  },\n  "kjzl6cwe1jw149rledowj0zi0icd7epi9y1m5tx4pardt1w6dzcxvr6bohi8ejc": {\n    "type": 0,\n    "content": {\n      "Document": "A"\n    },\n    "metadata": {\n      "schema": null,\n      "controllers": [\n        "did:key:z6MkfZ6S4NVVTEuts8o5xFzRMR8eC6Y1bngoBQNnXiCvhH8H"\n      ]\n    },\n    "signature": 2,\n    "anchorStatus": "PENDING",\n    "log": [\n      {\n        "cid": "bagcqcerawq5h7otlkdwuai7vhogqhs2aeaauwbu2aqclrh4iyu5h54qqogma",\n        "type": 0\n      }\n    ],\n    "anchorScheduledFor": "12/30/2020, 1:45:00 PM"\n  },\n  "kjzl6cwe1jw147w3xz3xrcd37chh2rz4dfra3imtnsni385rfyqa3hbx42qwal0": {\n    "type": 0,\n    "content": {\n      "Document": "B"\n    },\n    "metadata": {\n      "schema": null,\n      "controllers": [\n        "did:key:z6MkfZ6S4NVVTEuts8o5xFzRMR8eC6Y1bngoBQNnXiCvhH8H"\n      ]\n    },\n    "signature": 2,\n    "anchorStatus": "PENDING",\n    "log": [\n      {\n        "cid": "bagcqceranecdjzw4xheudgkr2amjkntpktci2xv44d7v4hbft3ndpptid6ka",\n        "type": 0\n      }\n    ],\n    "anchorScheduledFor": "12/30/2020, 1:45:00 PM"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"commits-api",children:(0,t.jsx)(n.strong,{children:"Commits API"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"commits"})," endpoint provides lower level access to the data structure of a\nCeramic stream. It is also the enpoint that is used in order to update a stream,\nby adding a new commit."]}),"\n",(0,t.jsx)(n.h3,{id:"getting-all-commits-in-a-stream",children:"Getting all commits in a stream"}),"\n",(0,t.jsxs)(n.p,{children:["By calling GET on the ",(0,t.jsx)(n.em,{children:"commits"})," endpoint along with a StreamID gives you access\nto all of the commits of the given stream. This is useful if you want to inspect\nthe stream history, or apply all of the commits to a Ceramic node that is not\nconnected to the network."]}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"GET /api/v0/commits/:streamid\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here, ",(0,t.jsx)(n.code,{children:":streamid"})," should be replaced by the string representation of the StreamID of the stream that is being requested."]}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"streamId"})," - the StreamID of the requested stream, string"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"commits"})," - an array of commit objects"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:7007/api/v0/commits/kjzl6cwe1jw14ahmwunhk9yjwawac12tb52j1uj3b9a57eohmhycec8778p3syv\n"})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'{\n  "streamId": "kjzl6cwe1jw14ahmwunhk9yjwawac12tb52j1uj3b9a57eohmhycec8778p3syv",\n  "commits": [\n    {\n      "cid": "bagcqcera2faj5vik2giftqxftbngfndkci7x4z5vp3psrf4flcptgkz5xztq",\n      "value": {\n        "jws": {\n          "payload": "AXESIAsUBpZMnue1yQ0BgXsjOFyN0cHq6AgspXnI7qGB54ux",\n          "signatures": [\n            {\n              "signature": "16tBnfkXQU0yo-RZvfjWhm7pP-hIxJ5m-FIMHlCrRkpjbleoEcaC80Xt7qs_WZOlOCexznjow9aX4aZe51cYCQ",\n              "protected": "eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa2ZaNlM0TlZWVEV1dHM4bzV4RnpSTVI4ZUM2WTFibmdvQlFOblhpQ3ZoSDhII3o2TWtmWjZTNE5WVlRFdXRzOG81eEZ6Uk1SOGVDNlkxYm5nb0JRTm5YaUN2aEg4SCJ9"\n            }\n          ],\n          "link": "bafyreialcqdjmte64624sdibqf5sgoc4rxi4d2xibawkk6oi52qydz4lwe"\n        },\n        "linkedBlock": "o2RkYXRhoWV0aXRsZXFNeSBmaXJzdCBEb2N1bWVudGZoZWFkZXKiZnNjaGVtYfZrY29udHJvbGxlcnOBeDhkaWQ6a2V5Ono2TWtmWjZTNE5WVlRFdXRzOG81eEZ6Uk1SOGVDNlkxYm5nb0JRTm5YaUN2aEg4SGZ1bmlxdWVwenh0b1A5blphdVgxcEE0OQ"\n      }\n    },\n    {\n      "cid": "bagcqcera3fkje7je4lvctkam4fvi675avtcuqgrv7dn6aoqljd5lebpl7rfq",\n      "value": {\n        "jws": {\n          "payload": "AXESINm6lI30m3j5H2ausx-ulXj-L9CmFlOTZBZvJ2O734Zt",\n          "signatures": [\n            {\n              "signature": "zsLJbBSU5xZTQkYlXwEH9xj_t_8frvSFCYs0SlVMPXOnw8zOJOsKnJDQlUOvPJxjt8Bdc_7xoBdmcRG1J1tpCw",\n              "protected": "eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa2ZaNlM0TlZWVEV1dHM4bzV4RnpSTVI4ZUM2WTFibmdvQlFOblhpQ3ZoSDhII3o2TWtmWjZTNE5WVlRFdXRzOG81eEZ6Uk1SOGVDNlkxYm5nb0JRTm5YaUN2aEg4SCJ9"\n            }\n          ],\n          "link": "bafyreigzxkki35e3pd4r6zvowmp25fly7yx5bjqwkojwiftpe5r3xx4gnu"\n        },\n        "linkedBlock": "pGJpZNgqWCYAAYUBEiDRQJ7VCtGQWcLlmFpitGoSP35ntX7fKJeFWJ8zKz2+Z2RkYXRhgaNib3BjYWRkZHBhdGhlL21vcmVldmFsdWUY6mRwcmV22CpYJgABhQESINFAntUK0ZBZwuWYWmK0ahI/fme1ft8ol4VYnzMrPb5nZmhlYWRlcqFrY29udHJvbGxlcnOA"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"applying-a-new-commit-to-stream",children:"Applying a new commit to stream"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Disabled in gateway mode"})})}),"\n",(0,t.jsxs)(n.p,{children:["In order to modify a stream we apply a commit to its log. This commit usually\ncontains a signature over a ",(0,t.jsx)(n.em,{children:"json-patch"})," diff describing a modification to the\nstream contents. The commit also needs to contain pointers to the previous\ncommit and other metadata. You can read more about this in the\n",(0,t.jsx)(n.a,{href:"https://github.com/ceramicnetwork/.github/blob/main/LEGACY_SPECIFICATION.md",children:"Ceramic Specification"}),".\nDifferent stream types may have different formats for their commits. If you want\nto see an example implementation for how to construct a commit you can have a\nlook at the implementation of the TileDocument."]}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"POST /api/v0/commits\n"})}),"\n",(0,t.jsx)(n.h4,{id:"request-body-fields-2",children:"Request body fields:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"streamId"})," - the StreamID of the stream to apply the commit to, string"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"commit"})," - the content of the commit to apply (will differ per streamtype)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"opts"})," - options for the stream update ",(0,t.jsx)(n.a,{href:"https://developers.ceramic.network/reference/typescript/interfaces/_ceramicnetwork_common.UpdateOpts.html",children:"UpdateOpts"})," (optional)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"streamId"})," - the StreamID of the stream that was modified"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"state"})," - the new state of the stream that was modified, ",(0,t.jsx)(n.a,{href:"https://developers.ceramic.network/reference/typescript/interfaces/_ceramicnetwork_common.StreamState.html",children:"StreamState"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl http://localhost:7007/api/v0/commits -X POST -d \'{\n  "streamId": "kjzl6cwe1jw14ahmwunhk9yjwawac12tb52j1uj3b9a57eohmhycec8778p3syv",\n  "commit": {\n    "jws": {\n      "payload": "AXESINm6lI30m3j5H2ausx-ulXj-L9CmFlOTZBZvJ2O734Zt",\n      "signatures": [\n        {\n          "signature": "zsLJbBSU5xZTQkYlXwEH9xj_t_8frvSFCYs0SlVMPXOnw8zOJOsKnJDQlUOvPJxjt8Bdc_7xoBdmcRG1J1tpCw",\n          "protected": "eyJhbGciOiJFZERTQSIsImtpZCI6ImRpZDprZXk6ejZNa2ZaNlM0TlZWVEV1dHM4bzV4RnpSTVI4ZUM2WTFibmdvQlFOblhpQ3ZoSDhII3o2TWtmWjZTNE5WVlRFdXRzOG81eEZ6Uk1SOGVDNlkxYm5nb0JRTm5YaUN2aEg4SCJ9"\n        }\n      ],\n      "link": "bafyreigzxkki35e3pd4r6zvowmp25fly7yx5bjqwkojwiftpe5r3xx4gnu"\n    },\n    "linkedBlock": "pGJpZNgqWCYAAYUBEiDRQJ7VCtGQWcLlmFpitGoSP35ntX7fKJeFWJ8zKz2+Z2RkYXRhgaNib3BjYWRkZHBhdGhlL21vcmVldmFsdWUY6mRwcmV22CpYJgABhQESINFAntUK0ZBZwuWYWmK0ahI/fme1ft8ol4VYnzMrPb5nZmhlYWRlcqFrY29udHJvbGxlcnOA"\n  }\n}\' -H "Content-Type: application/json"\n'})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'{\n  "streamId": "kjzl6cwe1jw14ahmwunhk9yjwawac12tb52j1uj3b9a57eohmhycec8778p3syv",\n  "state": {\n    "type": 0,\n    "content": {\n      "title": "My first Document"\n    },\n    "metadata": {\n      "schema": null,\n      "controllers": [\n        "did:key:z6MkfZ6S4NVVTEuts8o5xFzRMR8eC6Y1bngoBQNnXiCvhH8H"\n      ]\n    },\n    "signature": 2,\n    "anchorStatus": "PENDING",\n    "log": [\n      {\n        "cid": "bagcqcera2faj5vik2giftqxftbngfndkci7x4z5vp3psrf4flcptgkz5xztq",\n        "type": 0\n      },\n      {\n        "cid": "bagcqcera3fkje7je4lvctkam4fvi675avtcuqgrv7dn6aoqljd5lebpl7rfq",\n        "type": 1\n      }\n    ],\n    "anchorScheduledFor": "12/30/2020, 1:15:00 PM",\n    "next": {\n      "content": {\n        "title": "My first Document",\n        "more": 234\n      },\n      "metadata": {\n        "schema": null,\n        "controllers": []\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"pins-api",children:"Pins API"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"pins"})," api endpoint can be used to manipulate the pinset. The pinset is all\nof the streams that a node maintains the state of. Any stream opened by the node\nthat is not pinned will eventually be garbage collected from the node."]}),"\n",(0,t.jsx)(n.h3,{id:"adding-to-pinset",children:"Adding to pinset"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Disabled in gateway mode"})})}),"\n",(0,t.jsx)(n.p,{children:"This method adds the stream with the given StreamID to the pinset."}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"POST /api/v0/pins/:streamid\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here, ",(0,t.jsx)(n.code,{children:":streamid"})," should be replaced by the string representation of the StreamID of the stream that is being requested."]}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.p,{children:"If the operation was sucessful the response will be a 200 OK."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"streamId"})," - the StreamID of the stream which was pinned, string"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:7007/api/v0/pins/k2t6wyfsu4pg2qvoorchoj23e8hf3eiis4w7bucllxkmlk91sjgluuag5syphl -X POST\n"})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'{\n  "streamId": "k2t6wyfsu4pg2qvoorchoj23e8hf3eiis4w7bucllxkmlk91sjgluuag5syphl"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"removing-from-pinset",children:"Removing from pinset"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Disabled in gateway mode"})})}),"\n",(0,t.jsx)(n.p,{children:"This method removes the stream with the given StreamID from the pinset."}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"DELETE /api/v0/pins/:streamid\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here, ",(0,t.jsx)(n.code,{children:":streamid"})," should be replaced by the string representation of the StreamID of the stream that is being requested."]}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.p,{children:"If the operation was sucessful the response will be a 200 OK."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"streamId"})," - the StreamID of the stream which was unpinned, string"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-6",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:7007/api/v0/pins/k2t6wyfsu4pg2qvoorchoj23e8hf3eiis4w7bucllxkmlk91sjgluuag5syphl -X DELETE\n"})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'{\n  "streamId": "k2t6wyfsu4pg2qvoorchoj23e8hf3eiis4w7bucllxkmlk91sjgluuag5syphl"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"listing-streams-in-pinset",children:"Listing streams in pinset"}),"\n",(0,t.jsx)(n.p,{children:"Calling this method allows you to list all of the streams that are in the pinset\non this node."}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"GET /api/v0/pins\n"})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pinnedStreamIds"})," - an array of StreamID strings that are in the pinset"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-7",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:7007/api/v0/pins\n"})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'{\n  "pinnedStreamIds": [\n    "k2t6wyfsu4pfwqaju0w9nmi53zo6f5bcier7vc951x4b9rydv6t8q4pvzd5w3l",\n    "k2t6wyfsu4pfxon8reod8xcyka9bujeg7acpz8hgh0jsyc7p2b334izdyzsdp7",\n    "k2t6wyfsu4pfxqseec01fnqywmn8l93p4g2chzyx3sod3hpyovurye9hskcegs",\n    "k2t6wyfsu4pfya9y0ega1vnokf0g5qaus69basy52oxg50y3l35vm9rqbb88t3"\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"checking-inclusion-in-pinset",children:"Checking inclusion in pinset"}),"\n",(0,t.jsx)(n.p,{children:"This method is used to check if a particular stream is in the pinset."}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"GET /api/v0/pins/:streamid\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here, ",(0,t.jsx)(n.code,{children:":streamid"})," should be replaced by the string representation of the StreamID of the stream that is being requested."]}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pinnedStreamIds"})," - an array containing the specified StreamID string if that stream is pinned, or an empty array if that stream is not pinned"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-8",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:7007/api/v0/pins/k2t6wyfsu4pg2qvoorchoj23e8hf3eiis4w7bucllxkmlk91sjgluuag5syphl\n"})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'{\n  "pinnedStreamIds": ["k2t6wyfsu4pg2qvoorchoj23e8hf3eiis4w7bucllxkmlk91sjgluuag5syphl"]\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"node-info-apis",children:"Node Info APIs"}),"\n",(0,t.jsxs)(n.p,{children:["The methods under the ",(0,t.jsx)(n.code,{children:"/node"})," path provides more information about this\nparticular node."]}),"\n",(0,t.jsx)(n.h3,{id:"supported-blockchains-for-anchoring",children:"Supported blockchains for anchoring"}),"\n",(0,t.jsxs)(n.p,{children:["Get all of the\n",(0,t.jsx)(n.a,{href:"https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md",children:"CAIP-2"}),"\n",(0,t.jsx)(n.em,{children:"chainIds"})," supported by this node."]}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"GET /api/v0/node/chains\n"})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.p,{children:"The response body contains the following fields:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"supportedChains"})," - and array with ",(0,t.jsx)(n.a,{href:"https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md",children:"CAIP-2"})," formatted chainIds"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"example-9",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:7007/api/v0/node/chains\n"})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'{\n  "supportedChains": ["eip155:3"]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"health-check",children:"Health check"}),"\n",(0,t.jsxs)(n.p,{children:["Check the health of the node and the machine it's running on. Run\n",(0,t.jsx)(n.code,{children:"ceramic daemon -h"})," for more details on how this can be configured."]}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"GET /api/v0/node/healthcheck\n"})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsxs)(n.p,{children:["Either a ",(0,t.jsx)(n.code,{children:"200"})," response with the text ",(0,t.jsx)(n.code,{children:"Alive!"}),", or a ",(0,t.jsx)(n.code,{children:"503"})," with the text ",(0,t.jsx)(n.code,{children:"Insufficient resources"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"example-10",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:7007/api/v0/node/healthcheck\n"})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Alive!\n"})}),"\n",(0,t.jsx)(n.h3,{id:"node-status",children:"Node status"}),"\n",(0,t.jsx)(n.p,{children:"The node status endpoint exposes information about the node's status."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Admin DID required"})})}),"\n",(0,t.jsxs)(n.p,{children:["Access to this endpoint is restricted to admin DIDs, the request headers need to\ncontain a signature for the request. The recommended way to interact with this\nendpoint is using the CLI with the ",(0,t.jsx)(n.code,{children:"ceramic status"})," command."]}),"\n",(0,t.jsx)(n.p,{children:'=== "Request"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"GET /api/v0/admin/status\n"})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsxs)(n.p,{children:["Either a ",(0,t.jsx)(n.code,{children:"200"})," response with the JSON payload, or a server error."]}),"\n",(0,t.jsx)(n.h4,{id:"example-11",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:'=== "Command"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"ceramic status\n"})}),"\n",(0,t.jsx)(n.p,{children:'=== "Response"'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "runId": "7647439f-44fa-4aff-b3c8-b7e16015c52e",\n  "uptimeMs": 27638,\n  "network": "inmemory",\n  "anchor": {\n    "anchorServiceUrl": "<inmemory>",\n    "ethereumRpcEndpoint": null,\n    "chainId": "inmemory:12345"\n  },\n  "ipfs": {\n    "peerId": "12D3KooWRzv8fM4oV6jRj8nsg8kxo3Z9u26vVXLaUKiLbuoV3Vtp",\n    "addresses": [\n      "/ip4/127.0.0.1/tcp/4011/p2p/12D3KooWRzv8fM4oV6jRj8nsg8kxo3Z9u26vVXLaUKiLbuoV3Vtp",\n      "/ip4/192.168.0.101/tcp/4011/p2p/12D3KooWRzv8fM4oV6jRj8nsg8kxo3Z9u26vVXLaUKiLbuoV3Vtp"\n    ]\n  },\n  "composeDB": {\n    "indexedModels": []\n  }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},63883:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>r});var t=s(50959);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);