"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1693],{2107:(e,i,c)=>{c.r(i),c.d(i,{assets:()=>o,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var t=c(11527),n=c(63883);const s={},a="Clients",r={id:"protocol/js-ceramic/guides/ceramic-clients/clients-overview",title:"Clients",description:"Ceramic clients",source:"@site/docs/protocol/js-ceramic/guides/ceramic-clients/clients-overview.md",sourceDirName:"protocol/js-ceramic/guides/ceramic-clients",slug:"/protocol/js-ceramic/guides/ceramic-clients/clients-overview",permalink:"/docs/protocol/js-ceramic/guides/ceramic-clients/clients-overview",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"protocol",previous:{title:"Running Ceramic nodes in the cloud environment",permalink:"/docs/protocol/js-ceramic/guides/ceramic-nodes/running-cloud"},next:{title:"Ceramic HTTP client",permalink:"/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http"}},o={},l=[{value:"Ceramic clients",id:"ceramic-clients",level:3},{value:"Account clients",id:"account-clients",level:3},{value:"Available clients",id:"available-clients",level:2},{value:"<strong>JS Ceramic HTTP Client \u2192</strong>",id:"js-ceramic-http-client-",level:3},{value:"DID JSON-RPC Client \u2192",id:"did-json-rpc-client-",level:3}];function d(e){const i={a:"a",h1:"h1",h2:"h2",h3:"h3",hr:"hr",p:"p",strong:"strong",...(0,n.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"clients",children:"Clients"}),"\n",(0,t.jsx)(i.h3,{id:"ceramic-clients",children:"Ceramic clients"}),"\n",(0,t.jsxs)(i.p,{children:["Ceramic clients are libraries that allow your application to communicate with a Ceramic node. Different clients may choose to implement different high-level, language-specific developer APIs. Before submitting requests to a Ceramic node, clients translate those API calls into the standard ",(0,t.jsx)(i.a,{href:"/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http",children:"Ceramic HTTP API"}),", which it uses to actually communicate with a Ceramic node."]}),"\n",(0,t.jsx)(i.h3,{id:"account-clients",children:"Account clients"}),"\n",(0,t.jsx)(i.p,{children:"Account clients are libraries that allow your application to recognize users, authenticate, and perform other account-related functionality such as signing transactions and encrypting data."}),"\n",(0,t.jsx)(i.h2,{id:"available-clients",children:"Available clients"}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.p,{children:"When building with Ceramic clients, be sure to install both a Ceramic client and an account client."}),"\n",(0,t.jsx)(i.h3,{id:"js-ceramic-http-client-",children:(0,t.jsx)(i.a,{href:"/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http",children:(0,t.jsx)(i.strong,{children:"JS Ceramic HTTP Client \u2192"})})}),"\n",(0,t.jsx)(i.p,{children:"The Ceramic JS HTTP client is a Ceramic client that can be used in browsers and Node.js environments to connect your application to a Ceramic node. It is actively maintained by 3Box Labs and supports the latest Ceramic features. This is the recommended Ceramic client to build with for most applications."}),"\n",(0,t.jsx)(i.h3,{id:"did-json-rpc-client-",children:(0,t.jsx)(i.a,{href:"/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-jsonrpc",children:"DID JSON-RPC Client \u2192"})}),"\n",(0,t.jsx)(i.p,{children:"The DID JSON-RPC Client is an account client that provides a simple JS API for interacting with Ceramic accounts. It is actively maintained by 3Box Labs and supports all account types."})]})}function m(e={}){const{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},63883:(e,i,c)=>{c.d(i,{Z:()=>r,a:()=>a});var t=c(50959);const n={},s=t.createContext(n);function a(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);