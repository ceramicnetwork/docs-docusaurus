"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8068],{69810:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=t(11527),r=t(63883);const s={},a="Data Feed API",i={id:"protocol/js-ceramic/networking/data-feed-api",title:"Data Feed API",description:"The Ceramic Data Feed API gives developers a way to keep track of all the new state changes that are happening in the Ceramic network. There are 2 scenarios that would trigger an update on the feed:",source:"@site/docs/protocol/js-ceramic/networking/data-feed-api.md",sourceDirName:"protocol/js-ceramic/networking",slug:"/protocol/js-ceramic/networking/data-feed-api",permalink:"/docs/protocol/js-ceramic/networking/data-feed-api",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"protocol",previous:{title:"Networks",permalink:"/docs/protocol/js-ceramic/networking/networks"},next:{title:"Nodes Overview",permalink:"/docs/protocol/js-ceramic/nodes/overview"}},d={},c=[{value:"Configure your working environment",id:"configure-your-working-environment",level:2},{value:"1. Run a Ceramic node",id:"1-run-a-ceramic-node",level:3},{value:"2. Install additional dependencies",id:"2-install-additional-dependencies",level:3},{value:"Interact with the Data Feed API",id:"interact-with-the-data-feed-api",level:2},{value:"Resumability",id:"resumability",level:2},{value:"Frequently asked questions",id:"frequently-asked-questions",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"data-feed-api",children:"Data Feed API"}),"\n",(0,o.jsx)(n.p,{children:"The Ceramic Data Feed API gives developers a way to keep track of all the new state changes that are happening in the Ceramic network. There are 2 scenarios that would trigger an update on the feed:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Writes explicitly sent to the Ceramic node via the HTTP Client"}),"\n",(0,o.jsx)(n.li,{children:"Writes discovered from the network for Streams belonging to Models that are indexed on the Ceramic node"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This information can be used to take actions or simply stay updated on the current status of a stream or even a network. Data Feed API enables developers to build custom indexers or databases."}),"\n",(0,o.jsx)(n.h1,{id:"server-sent-events-and-eventsource-interface",children:"Server-Sent Events and EventSource interface"}),"\n",(0,o.jsxs)(n.p,{children:["To understand Data Feed API, it's important to have a basic understanding of ",(0,o.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events",children:"Server-Sent Events (SSE)"})," and the ",(0,o.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/EventSource",children:"EventSource"})," interface."]}),"\n",(0,o.jsx)(n.p,{children:"SSE is a simple and efficient way for servers to send real-time updates to web clients over a single HTTP connection. It works with the standard HTTP protocol, which makes it great for situations where the server needs to constantly update the client."}),"\n",(0,o.jsx)(n.p,{children:"The EventSource interface is a JavaScript API that makes it easy for web applications to consume SSE. It allows clients to receive updates as a stream of events, making it simple to integrate real-time data into web apps."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h1,{id:"getting-started",children:"Getting started"}),"\n",(0,o.jsx)(n.p,{children:"The guide below will cover the main steps you need to follow to start interacting with Data Feed API."}),"\n",(0,o.jsx)(n.h2,{id:"configure-your-working-environment",children:"Configure your working environment"}),"\n",(0,o.jsx)(n.h3,{id:"1-run-a-ceramic-node",children:"1. Run a Ceramic node"}),"\n",(0,o.jsxs)(n.p,{children:["To interact with Data Feed API you will need a Ceramic testnet or mainnet node up and running. Check out the ",(0,o.jsx)(n.a,{href:"/docs/composedb/set-up-your-environment",children:"Quickstart"})," for instructions on how to run Ceramic nodes locally and ",(0,o.jsx)(n.a,{href:"/docs/composedb/guides/composedb-server/running-in-the-cloud",children:"Running in the Cloud"})," guide for instructions on how to run a Ceramic node in the cloud."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"Make sure that your Ceramic node is using the Ceramic version 5.3 or higher to make sure that it supports the Data Feed logic."})}),"\n",(0,o.jsx)(n.h3,{id:"2-install-additional-dependencies",children:"2. Install additional dependencies"}),"\n",(0,o.jsx)(n.p,{children:"Depending on how you use the Data Feed API, you may need additional dependencies installed on your machine:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Cross-eventsource to use EventSource isomorphically on Node.js and browser:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm i cross-eventsource\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@ceramicnetwork/codecs"})," and ",(0,o.jsx)(n.code,{children:"codeco"})," for encoding and decoding:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm i @ceramicnetwork/codecs codeco \n"})}),"\n",(0,o.jsx)(n.h2,{id:"interact-with-the-data-feed-api",children:"Interact with the Data Feed API"}),"\n",(0,o.jsxs)(n.p,{children:["Below you can see a few examples of how you can interact with the Data Feed API. Currently, Data Feed API is available as read-only with support for ",(0,o.jsx)(n.code,{children:"GET"})," methods and access to Ceramic's aggregation layer."]}),"\n",(0,o.jsxs)(n.p,{children:["The following request ",(0,o.jsx)(n.code,{children:"GET"})," will return the following type of objects as activity is done on the Ceramic node:"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Request:"}),"\n",(0,o.jsx)(n.code,{children:"GET /api/v0/feed/aggregation/documents"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Response:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"FeedDocument = {\n  commitId: CommitID\n  content: any\n  metadata: StreamMetadata\n  eventType: EventType\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For example, the following request will return a response with the details provided below.\n",(0,o.jsx)(n.strong,{children:"Request:"}),"\n",(0,o.jsx)(n.code,{children:"curl http://localhost:7007/api/v0/feed/aggregation/documents"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Response:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'data: {\n  "commitId": "k6zn3t2py84tn1dpy24625xjv65g4r23wuqpch6mmrywshreivaqiyaqctrz2ba5kk0qjvec61pbmyl15b49zxfd8qd3aiiupltnpveh45oiranqr4njj40",\n  "content": "{...}",\n  "metadata": {\n    "controllers": [\n      "did:key:z6MknE3RuK7XU2W1KGCQrsSVhzRwCUJ9uMb6ugwbELm9JdP6"\n    ],\n    "model": "kh4q0ozorrgaq2mezktnrmdwleo1d"\n  },\n  "eventType": 2\n}\n\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The recommended way of interacting with the Data Feed API is by using event listeners as show in the example below. The provided example is using ",(0,o.jsx)(n.code,{children:"localhost:7007"})," as the host:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { EventSource\xa0 } from \"cross-eventsource\";\nimport { JsonAsString, AggregationDocument } from '@ceramicnetwork/codecs';\nimport { decode } from \"codeco\";\n\nconst source = new EventSource('http://localhost:7007/api/v0/feed/aggregation/documents')\nconst Codec = JsonAsString.pipe(AggregationDocument)\n\nsource.addEventListener('message', (event) => {\n\tconsole.log('message', event)\n\t//use JsonAsString, and AggregationDocument to decode and use event.data\n\tconst parsedData = decode(Codec, event.data);\n\tconsole.log('parsed', parsedData)\n})\n\nsource.addEventListener('error', error => {\n\tconsole.log('error', error)\n})\n\nconsole.log('listening...')\n"})}),"\n",(0,o.jsx)(n.h2,{id:"resumability",children:"Resumability"}),"\n",(0,o.jsxs)(n.p,{children:["In case your application drops a connection and needs to start where it dropped, Data Feed API could be resumed. Every event emitted by the Data Feed API contains ",(0,o.jsx)(n.code,{children:"resumeToken"})," property. When initiating a connection, you might ask to emit entries after ",(0,o.jsx)(n.code,{children:"resumeToken"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, your application got an entry containing ",(0,o.jsx)(n.code,{children:'resumeToken: "1714742204565000000"'}),". When connecting, pass the token value as a query parameter to emit the entries after this checkpoint:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// ... same as a code snipped above\nconst url = new URL(\"http://localhost:7007/api/v0/feed/aggregation/documents\")\nurl.searchParams.set('after', '1714742204565000000') // Value of the last resumeToken\n// Connection to http://localhost:7007/api/v0/feed/aggregation/documents?after=1714742204565000000\nconst source = new EventSource(url)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"frequently-asked-questions",children:"Frequently asked questions"}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"How to get the StreamId from the feed?"}),(0,o.jsx)("div",{children:(0,o.jsxs)("div",{children:[(0,o.jsx)(n.p,{children:"The StreamId can be extracted from the CommitID included in the feed response as seen below:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"  ...\n\n  source.addEventListener('message', (event) => {\n      console.log('message', event)\n      //use JsonAsString, and AggregationDocument to decode and use event.data\n      const parsedData = decode(Codec, event.data)\n      const streamId = parsedData.commitId.baseID\n      console.log('parsed', parsedData)\n      console.log('StreamID',streamId)\n  })\n  ...\n"})})]})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"What are delivery guarantees of the Feed API?"}),(0,o.jsx)("div",{children:(0,o.jsx)("div",{children:(0,o.jsxs)(n.p,{children:["The feed sends data according to \u201cat least once\u201d guarantee. For every stream change, the latest stream state is delivered. For example, if a stream went through changes ",(0,o.jsx)(n.code,{children:"a"}),", ",(0,o.jsx)(n.code,{children:"b"}),", ",(0,o.jsx)(n.code,{children:"c"})," giving states ",(0,o.jsx)(n.code,{children:"A"}),", ",(0,o.jsx)(n.code,{children:"B"}),", ",(0,o.jsx)(n.code,{children:"C"}),", you could expect three events over Feed API: ",(0,o.jsx)(n.code,{children:"C"}),", ",(0,o.jsx)(n.code,{children:"C"}),", ",(0,o.jsx)(n.code,{children:"C"}),"."]})})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"How far in the past could I resume from?"}),(0,o.jsx)("div",{children:(0,o.jsx)("div",{children:(0,o.jsx)(n.p,{children:"You could expect up to 7 days worth of history stored."})})})]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},63883:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>a});var o=t(50959);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);