"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8606],{59179:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var t=i(11527),c=i(63883);const a={},r="CAIP-10 Link client",o={id:"protocol/js-ceramic/guides/ceramic-clients/stream-api/caip10-link",title:"CAIP-10 Link client",description:"---",source:"@site/docs/protocol/js-ceramic/guides/ceramic-clients/stream-api/caip10-link.md",sourceDirName:"protocol/js-ceramic/guides/ceramic-clients/stream-api",slug:"/protocol/js-ceramic/guides/ceramic-clients/stream-api/caip10-link",permalink:"/docs/protocol/js-ceramic/guides/ceramic-clients/stream-api/caip10-link",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"protocol",previous:{title:"Module: did-session",permalink:"/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-session"},next:{title:"Streams",permalink:"/docs/protocol/js-ceramic/streams/streams-index"}},s={},l=[{value:"Installation",id:"installation",level:2},{value:"Additional requirements",id:"additional-requirements",level:3},{value:"Common usage",id:"common-usage",level:2},{value:"Load a link",id:"load-a-link",level:3},{value:"Create a link",id:"create-a-link",level:3},{value:"Remove a link",id:"remove-a-link",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"caip-10-link-client",children:"CAIP-10 Link client"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["A CAIP-10 Link is a stream that stores a proof that links a blockchain address to a Ceramic account (DID), using the ",(0,t.jsx)(n.a,{href:"https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md",children:"CAIP-10 standard"})," to represent blockchain addresses."]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"npm install @ceramicnetwork/stream-caip10-link\n"})}),"\n",(0,t.jsx)(n.h3,{id:"additional-requirements",children:"Additional requirements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["In order to load CAIP-10 Links, a ",(0,t.jsx)(n.a,{href:"/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http",children:"Ceramic client instance"})," must be available"]}),"\n",(0,t.jsxs)(n.li,{children:["To add/remove links, the client must also have an ",(0,t.jsx)(n.a,{href:"/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-jsonrpc",children:"authenticated DID"})]}),"\n",(0,t.jsxs)(n.li,{children:["An authentication provider is needed to sign the payload for the given CAIP-10 account, using the ",(0,t.jsx)(n.code,{children:"blockchain-utils-linking"})," module that should be installed as needed:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"npm install @ceramicnetwork/blockchain-utils-linking\n"})}),"\n",(0,t.jsx)(n.h2,{id:"common-usage",children:"Common usage"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"load-a-link",children:"Load a link"}),"\n",(0,t.jsxs)(n.p,{children:["In this example we load a Caip10Link for the account ",(0,t.jsx)(n.code,{children:"0x054...7cb8"})," on the Ethereum mainnet blockchain (",(0,t.jsx)(n.code,{children:"eip155:1"}),")."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Caip10Link } from '@ceramicnetwork/stream-caip10-link'\n\nconst ceramic = new CeramicClient()\n\nasync function getLinkedDID() {\n  // Using the Ceramic client instance, we can load the link for a given CAIP-10 account\n  const link = await Caip10Link.fromAccount(\n    ceramic,\n    '0x0544dcf4fce959c6c4f3b7530190cb5e1bd67cb8@eip155:1',\n  )\n  // The `did` property of the loaded link will contain the DID string value if set\n  return link.did\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"create-a-link",children:"Create a link"}),"\n",(0,t.jsx)(n.p,{children:"Here we can see the full flow of getting a user's Ethereum address, creating a link, and adding the users' DID account."}),"\n",(0,t.jsxs)(n.p,{children:["In this example we create a Caip10Link for the account ",(0,t.jsx)(n.code,{children:"0x054...7cb8"})," on the Ethereum mainnet blockchain (",(0,t.jsx)(n.code,{children:"eip155:1"}),") and then associate it with the DID ",(0,t.jsx)(n.code,{children:"did:3:k2t6...ydki"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Caip10Link } from '@ceramicnetwork/stream-caip10-link'\nimport { EthereumAuthProvider } from '@ceramicnetwork/blockchain-utils-linking'\n\nconst ceramic = new CeramicClient()\n\nasync function linkCurrentAddress() {\n  // First, we need to create an EthereumAuthProvider with the account currently selected\n  // The following assumes there is an injected `window.ethereum` provider\n  const addresses = await window.ethereum.request({\n    method: 'eth_requestAccounts',\n  })\n  const authProvider = new EthereumAuthProvider(window.ethereum, addresses[0])\n\n  // Retrieve the CAIP-10 account from the EthereumAuthProvider instance\n  const accountId = await authProvider.accountId()\n\n  // Load the account link based on the account ID\n  const accountLink = await Caip10Link.fromAccount(\n    ceramic,\n    accountId.toString(),\n  )\n\n  // Finally, link the DID to the account using the EthereumAuthProvider instance\n  await accountLink.setDid(\n    'did:3:k2t6wyfsu4pg0t2n4j8ms3s33xsgqjhtto04mvq8w5a2v5xo48idyz38l7ydki',\n    authProvider,\n  )\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"remove-a-link",children:"Remove a link"}),"\n",(0,t.jsxs)(n.p,{children:["Removing a link involves a similar flow to setting the DID, but using the ",(0,t.jsx)(n.code,{children:"clearDid"})," method instead of ",(0,t.jsx)(n.code,{children:"setDid"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Caip10Link } from '@ceramicnetwork/stream-caip10-link'\nimport { EthereumAuthProvider } from '@ceramicnetwork/blockchain-utils-linking'\n\nconst ceramic = new CeramicClient()\n\nasync function unlinkCurrentAddress() {\n  // First, we need to create an EthereumAuthProvider with the account currently selected\n  // The following assumes there is an injected `window.ethereum` provider\n  const addresses = await window.ethereum.request({\n    method: 'eth_requestAccounts',\n  })\n  const authProvider = new EthereumAuthProvider(window.ethereum, addresses[0])\n\n  // Retrieve the CAIP-10 account from the EthereumAuthProvider instance\n  const accountId = await authProvider.accountId()\n\n  // Load the account link based on the account ID\n  const accountLink = await Caip10Link.fromAccount(\n    ceramic,\n    accountId.toString(),\n  )\n\n  // Finally, unlink the DID from the account using the EthereumAuthProvider instance\n  await accountLink.clearDid(authProvider)\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},63883:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>r});var t=i(50959);const c={},a=t.createContext(c);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);