"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4533],{41608:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>m});var t=s(11527),i=s(63883),n=s(37421),r=s(81779);const a={},l="Composites",c={id:"composedb/guides/data-modeling/composites",title:"Composites",description:"Guides for creating, deploying, and using composites.",source:"@site/docs/composedb/guides/data-modeling/composites.mdx",sourceDirName:"composedb/guides/data-modeling",slug:"/composedb/guides/data-modeling/composites",permalink:"/docs/composedb/guides/data-modeling/composites",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"composedb",previous:{title:"Relations",permalink:"/docs/composedb/guides/data-modeling/relations"},next:{title:"ComposeDB Client",permalink:"/docs/composedb/guides/composedb-client/"}},d={},m=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Creating composites",id:"creating-composites",level:3},{value:"Deploying composites",id:"deploying-composites",level:3},{value:"Compiling composites",id:"compiling-composites",level:3},{value:"Advanced",id:"advanced",level:2},{value:"Merging composites",id:"merging-composites",level:3},{value:"Extracting composites",id:"extracting-composites",level:3},{value:"Inspecting composites",id:"inspecting-composites",level:3},{value:"Aliasing composites",id:"aliasing-composites",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Related Guides",id:"related-guides",level:2}];function p(e){const o={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h1,{id:"composites",children:"Composites"}),"\n",(0,t.jsx)(o.p,{children:"Guides for creating, deploying, and using composites."}),"\n",(0,t.jsx)(o.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(o.hr,{}),"\n",(0,t.jsx)(o.p,{children:"In order to start using a model in your app, you\u2019ll have to include it in a composite. Composites are collections of one or more models and represent the complete GraphQL schema for your app. For basic usage, follow these steps:"}),"\n",(0,t.jsxs)(o.ol,{children:["\n",(0,t.jsx)(o.li,{children:"Create a composite containing one or more models"}),"\n",(0,t.jsx)(o.li,{children:"Deploy the composite to your ComposeDB server"}),"\n",(0,t.jsx)(o.li,{children:"Compile the composite for usage by your ComposeDB client"}),"\n"]}),"\n",(0,t.jsx)(o.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(o.hr,{}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsx)(o.li,{children:"If you want to manage your composites from the CLI, you will need to have it installed"}),"\n",(0,t.jsxs)(o.li,{children:["If you want to manage your composites from JavaScript, you will need to install the\xa0",(0,t.jsx)(o.a,{href:"https://composedb.js.org/docs/0.5.x/api/modules/devtools",children:(0,t.jsx)(o.code,{children:"@composedb/devtools"})}),"\xa0library"]}),"\n",(0,t.jsxs)(o.li,{children:["One or more ",(0,t.jsx)(o.code,{children:".graphql"})," files containing your models"]}),"\n"]}),"\n",(0,t.jsx)(o.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(o.hr,{}),"\n",(0,t.jsx)(o.h3,{id:"creating-composites",children:"Creating composites"}),"\n",(0,t.jsxs)(o.p,{children:["Let\u2019s say you have a model written in a ",(0,t.jsx)(o.code,{children:"my-schema.graphql"})," file. To convert this schema into a composite, run the following:"]}),"\n",(0,t.jsxs)(n.Z,{defaultValue:"cli",groupId:"cli-or-js",values:[{label:"CLI",value:"cli"},{label:"JavaScript",value:"js"}],children:[(0,t.jsx)(r.Z,{value:"cli",children:(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"composedb composite:create my-schema.graphql --output=my-composite.json --did-private-key=your-private-key\n"})})}),(0,t.jsx)(r.Z,{value:"js",children:(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { DID } from 'dids'\nimport { Ed25519Provider } from 'key-did-provider-ed25519'\nimport { getResolver } from 'key-did-resolver'\nimport { fromString } from 'uint8arrays/from-string'\n\n// Import the devtool node package\nimport { createComposite, writeEncodedComposite } from '@composedb/devtools-node'\n\n// Hexadecimal-encoded private key for a DID having admin access to the target Ceramic node\n// Replace the example key here by your admin private key\nconst privateKey = fromString('b0cb[...]515f', 'base16')\n\nconst did = new DID({\n  resolver: getResolver(),\n  provider: new Ed25519Provider(privateKey),\n})\nawait did.authenticate()\n\n// Replace by the URL of the Ceramic node you want to deploy the Models to\nconst ceramic = new CeramicClient('http://localhost:7007')\n// An authenticated DID with admin access must be set on the Ceramic instance\nceramic.did = did\n\n// Replace by the path to the source schema file\nconst composite = await createComposite(ceramic, './source-schema.graphql')\n\n// Replace by the path to the encoded composite file\nawait writeEncodedComposite(composite, './my-composite.json')\n"})})})]}),"\n",(0,t.jsxs)(o.p,{children:["This will create a file called ",(0,t.jsx)(o.code,{children:"my-composite.json"})," which contains the composite in JSON."]}),"\n",(0,t.jsx)(o.h3,{id:"deploying-composites",children:"Deploying composites"}),"\n",(0,t.jsx)(o.p,{children:"After creating the composite, deploy it to your local node:"}),"\n",(0,t.jsxs)(n.Z,{defaultValue:"cli",groupId:"cli-or-js",values:[{label:"CLI",value:"cli"},{label:"JavaScript",value:"js"}],children:[(0,t.jsx)(r.Z,{value:"cli",children:(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"composedb composite:deploy my-composite.json --ceramic-url=http://localhost:7007 --did-private-key=your-private-key\n"})})}),(0,t.jsx)(r.Z,{value:"js",children:(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { DID } from 'dids'\nimport { Ed25519Provider } from 'key-did-provider-ed25519'\nimport { getResolver } from 'key-did-resolver'\nimport { fromString } from 'uint8arrays/from-string'\n\nimport { readEncodedComposite } from '@composedb/devtools-node'\n\n// Hexadecimal-encoded private key for a DID having admin access to the target Ceramic node\n// Replace the example key here by your admin private key\nconst privateKey = fromString('b0cb[...]515f', 'base16')\n\nconst did = new DID({\n  resolver: getResolver(),\n  provider: new Ed25519Provider(privateKey),\n})\nawait did.authenticate()\n\n// Replace by the URL of the Ceramic node you want to deploy the Models to\nconst ceramic = new CeramicClient('http://localhost:7007')\n// An authenticated DID with admin access must be set on the Ceramic instance\nceramic.did = did\n\n// Replace by the path to the local encoded composite file\nconst composite = await readEncodedComposite(ceramic, 'my-first-composite.json')\n\n// Notify the Ceramic node to index the models present in the composite\nawait composite.startIndexingOn(ceramic)\n"})})})]}),"\n",(0,t.jsx)(o.admonition,{type:"tip",children:(0,t.jsxs)(o.p,{children:["This will also automatically add all models contained in the composite to the ",(0,t.jsx)(o.a,{href:"/docs/composedb/guides/data-modeling/model-catalog",children:"Model Catalog"}),"."]})}),"\n",(0,t.jsx)(o.h3,{id:"compiling-composites",children:"Compiling composites"}),"\n",(0,t.jsxs)(o.p,{children:["After deploying your composite, compile it so you can start perform ",(0,t.jsx)(o.a,{href:"/docs/composedb/guides/data-interactions/",children:"data interactions"})," using the ComposeDB client."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"composedb composite:compile my-first-composite.json runtime-composite.json\n"})}),"\n",(0,t.jsx)(o.h2,{id:"advanced",children:"Advanced"}),"\n",(0,t.jsx)(o.hr,{}),"\n",(0,t.jsx)(o.h3,{id:"merging-composites",children:"Merging composites"}),"\n",(0,t.jsx)(o.p,{children:"If you have more than one composite, you need to merge them into a single composite for use in your app. This may apply when:"}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["You want to use multiple models from the ",(0,t.jsx)(o.a,{href:"/docs/composedb/guides/data-modeling/model-catalog#using-multiple-models",children:"catalog"})]}),"\n",(0,t.jsx)(o.li,{children:"You want to use a model from the catalog and one or more models you created"}),"\n",(0,t.jsx)(o.li,{children:"You create multiple models and store their schemas in different GraphQL files"}),"\n"]}),"\n",(0,t.jsxs)(o.p,{children:["Let\u2019s say you have two composites where ",(0,t.jsx)(o.code,{children:"simple-profile-composite.json"})," contains the model for a profile model and ",(0,t.jsx)(o.code,{children:"post-composite.json"})," contains the model for a post. To merge, reference both composite JSON files and specify an output file path for the merged composite."]}),"\n",(0,t.jsxs)(n.Z,{defaultValue:"cli",groupId:"cli-or-js",values:[{label:"CLI",value:"cli"},{label:"JavaScript",value:"js"}],children:[(0,t.jsx)(r.Z,{value:"cli",children:(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"composedb composite:merge simple-profile-composite.json post-composite.json --output=merged-composite.json\n"})})}),(0,t.jsxs)(r.Z,{value:"js",children:[(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Composite } from '@composedb/devtools'\nimport { readEncodedComposite, writeEncodedComposite } from '@composedb/devtools-node'\n\nconst ceramic = new CeramicClient('http://localhost:7007')\n\nconst loadSources = [\n  'simple-profile-composite.json',\n  'post-composite.json',\n].map(async (path) => await readEncodedComposite(ceramic, path))\nconst sourceComposites = await Promise.all(loadSources)\nconst mergedComposite = Composite.from(sourceComposites)\n\nawait writeEncodedComposite(mergedComposite, 'merged-composite.json')\n"})}),(0,t.jsxs)(o.admonition,{type:"caution",children:[(0,t.jsxs)(o.p,{children:[(0,t.jsx)(o.em,{children:(0,t.jsx)(o.strong,{children:"Note:"})})," To run the code above, you need a Ceramic JS HTTP client library installed on your machine to connect your app to a Ceramic node. Ceramic JS HTTP client can be installed by running the following command:"]}),(0,t.jsx)(o.p,{children:(0,t.jsx)(o.code,{children:"pnpm install @ceramicnetwork/http-client"})})]})]})]}),"\n",(0,t.jsxs)(o.p,{children:["The output of either example is a new file named ",(0,t.jsx)(o.code,{children:"merged-composite.json"})," which contains the models of both merged composites. From here you need to ",(0,t.jsx)(o.a,{href:"#deploying-composites",children:"deploy"})," the composite to your node, then ",(0,t.jsx)(o.a,{href:"#compiling-composites",children:"compile"})," the composite to start using it."]}),"\n",(0,t.jsx)(o.h3,{id:"extracting-composites",children:"Extracting composites"}),"\n",(0,t.jsx)(o.p,{children:"In cases where your composite contain models not needed by your application, or in other cases where you generally want to separate models in your composite, you can extract models into a separate composite."}),"\n",(0,t.jsxs)(o.p,{children:["As an example, let\u2019s reuse the ",(0,t.jsx)(o.code,{children:"merged-composite.json"})," file from the previous section and assume you want to extract the profile model into a separate composite. To do this, load the ",(0,t.jsx)(o.code,{children:"merged-composite.json"})," file and specify which model(s) you\u2019d like to extract into a new composite file."]}),"\n",(0,t.jsxs)(n.Z,{defaultValue:"cli",groupId:"cli-or-js",values:[{label:"CLI",value:"cli"},{label:"JavaScript",value:"js"}],children:[(0,t.jsx)(r.Z,{value:"cli",children:(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"composedb composite:extract-model merged-composite.json kjzl6hvfrbw6c5i55ks5m4hhyuh0jylw4g7x0asndu97i7luts4dfzvm35oev65 --output=new-composite.json\n"})})}),(0,t.jsx)(r.Z,{value:"js",children:(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Composite } from '@composedb/devtools'\nimport { readEncodedComposite, writeEncodedComposite } from '@composedb/devtools-node'\n\nconst ceramic = new CeramicClient('http://localhost:7007')\nconst sourceComposite = await readEncodedComposite(ceramic, 'merged-composite.json')\n\nconst mergedComposite = sourceComposite.copy(['kjzl6hvfrbw6c5i55ks5m4hhyuh0jylw4g7x0asndu97i7luts4dfzvm35oev65'])\nawait writeEncodedComposite(mergedComposite, 'new-composite.json')\n"})})})]}),"\n",(0,t.jsxs)(o.p,{children:["This will create a file called ",(0,t.jsx)(o.code,{children:"new-composite.json"})," with your profile model in it. From here you need to deploy the composite to your node, then ",(0,t.jsx)(o.a,{href:"#compiling-composites",children:"compile"})," the composite to start using it."]}),"\n",(0,t.jsx)(o.h3,{id:"inspecting-composites",children:"Inspecting composites"}),"\n",(0,t.jsx)(o.p,{children:"If you want to check what models are included in a specific composite, follow the steps below:"}),"\n",(0,t.jsxs)(o.ol,{children:["\n",(0,t.jsxs)(o.li,{children:["\n",(0,t.jsxs)(o.p,{children:["Compile the composite:\n",(0,t.jsx)(o.code,{children:"composedb composite:compile my-first-composite.json runtime-composite.json"})]}),"\n"]}),"\n",(0,t.jsxs)(o.li,{children:["\n",(0,t.jsxs)(o.p,{children:["View the GraphQL schema of the composite:\n",(0,t.jsx)(o.a,{href:"https://composedb.js.org/docs/0.5.x/api/commands/cli.graphql",children:(0,t.jsx)(o.code,{children:"composedb graphql:schema runtime-composite.json --output=schema.graphql"})})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(o.h3,{id:"aliasing-composites",children:"Aliasing composites"}),"\n",(0,t.jsx)(o.p,{children:"In general, models are referenced using their unique model streamIDs which are not memorable. Models can be more easily referenced by aliasing them to your preferred names."}),"\n",(0,t.jsxs)(o.p,{children:["To manually set aliases for your models, add the following section to your composite JSON file. In this case we will use the aliases ",(0,t.jsx)(o.code,{children:"SimpleProfile"})," and ",(0,t.jsx)(o.code,{children:"Post"}),"."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:'"aliases":{\n      "kjzl6hvfrbw6c5i55ks5m4hhyuh0jylw4g7x0asndu97i7luts4dfzvm35oev65":"SimpleProfile",\n      "kjzl6hvfrbw6c822s0cj1ug59spj648ml8a6mbqaz91wx8zx3mlwi76tfh3u1dy":"Post"\n   }\n'})}),"\n",(0,t.jsxs)(o.p,{children:["To do aliases programmatically, use the ComposeDB Devtools library. Here\u2019s an example script that loads a composite JSON file and assigns ",(0,t.jsx)(o.code,{children:"SimpleProfile"})," and ",(0,t.jsx)(o.code,{children:"Post"}),":"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:"import { CeramicClient } from '@ceramicnetwork/http-client'\nimport { Composite } from '@composedb/devtools'\nimport { readEncodedComposite, writeEncodedComposite } from '@composedb/devtools-node'\n\nconst ceramic = new CeramicClient('http://localhost:7007')\nconst sourceComposite = await readEncodedComposite(ceramic, 'merged-composite.json')\n\nconst newComposite = sourceComposite.setAliases({\n  'kjzl6hvfrbw6c5i55ks5m4hhyuh0jylw4g7x0asndu97i7luts4dfzvm35oev65': 'SimpleProfile',\n  'kjzl6hvfrbw6c822s0cj1ug59spj648ml8a6mbqaz91wx8zx3mlwi76tfh3u1dy': 'Post',\n})\nawait writeEncodedComposite(newComposite, 'new-composite.json')\n"})}),"\n",(0,t.jsxs)(o.p,{children:["This script will create a file named ",(0,t.jsx)(o.code,{children:"new-composite.json"})," including model aliases:"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-jsx",children:'"aliases":{\n      "kjzl6hvfrbw6c5i55ks5m4hhyuh0jylw4g7x0asndu97i7luts4dfzvm35oev65":"SimpleProfile",\n      "kjzl6hvfrbw6c822s0cj1ug59spj648ml8a6mbqaz91wx8zx3mlwi76tfh3u1dy":"Post"\n   }\n'})}),"\n",(0,t.jsxs)(o.p,{children:["From here you need to ",(0,t.jsx)(o.a,{href:"#deploying-composites",children:"deploy"})," the composite to your node, then ",(0,t.jsx)(o.a,{href:"#compiling-composites",children:"compile"})," the composite to start using it. When interacting with the models inside your app, you can refer to them using their human-readable aliases rather than their streamIDs."]}),"\n",(0,t.jsx)(o.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(o.hr,{}),"\n",(0,t.jsxs)(o.p,{children:["Set up your ",(0,t.jsx)(o.a,{href:"/docs/composedb/guides/composedb-client/",children:(0,t.jsx)(o.strong,{children:"ComposeDB Client"})})]}),"\n",(0,t.jsx)(o.h2,{id:"related-guides",children:"Related Guides"}),"\n",(0,t.jsx)(o.hr,{}),"\n",(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsx)(o.li,{children:(0,t.jsx)(o.a,{href:"/docs/composedb/guides/data-modeling/model-catalog",children:"Model Catalog"})}),"\n",(0,t.jsx)(o.li,{children:(0,t.jsx)(o.a,{href:"/docs/composedb/guides/data-modeling/writing-models",children:"Writing Models"})}),"\n"]})]})}function u(e={}){const{wrapper:o}={...(0,i.a)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},81779:(e,o,s)=>{s.d(o,{Z:()=>r});s(50959);var t=s(45924);const i={tabItem:"tabItem_e7Wc"};var n=s(11527);function r(e){let{children:o,hidden:s,className:r}=e;return(0,n.jsx)("div",{role:"tabpanel",className:(0,t.Z)(i.tabItem,r),hidden:s,children:o})}},37421:(e,o,s)=>{s.d(o,{Z:()=>w});var t=s(50959),i=s(45924),n=s(71988),r=s(28903),a=s(739),l=s(99965),c=s(43251),d=s(76698);function m(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:o}=e;return!!o&&"object"==typeof o&&"value"in o}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:o,children:s}=e;return(0,t.useMemo)((()=>{const e=o??function(e){return m(e).map((e=>{let{props:{value:o,label:s,attributes:t,default:i}}=e;return{value:o,label:s,attributes:t,default:i}}))}(s);return function(e){const o=(0,c.l)(e,((e,o)=>e.value===o.value));if(o.length>0)throw new Error(`Docusaurus error: Duplicate values "${o.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[o,s])}function u(e){let{value:o,tabValues:s}=e;return s.some((e=>e.value===o))}function h(e){let{queryString:o=!1,groupId:s}=e;const i=(0,r.k6)(),n=function(e){let{queryString:o=!1,groupId:s}=e;if("string"==typeof o)return o;if(!1===o)return null;if(!0===o&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return s??null}({queryString:o,groupId:s});return[(0,l._X)(n),(0,t.useCallback)((e=>{if(!n)return;const o=new URLSearchParams(i.location.search);o.set(n,e),i.replace({...i.location,search:o.toString()})}),[n,i])]}function g(e){const{defaultValue:o,queryString:s=!1,groupId:i}=e,n=p(e),[r,l]=(0,t.useState)((()=>function(e){let{defaultValue:o,tabValues:s}=e;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(o){if(!u({value:o,tabValues:s}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${o}" but none of its children has the corresponding value. Available values are: ${s.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return o}const t=s.find((e=>e.default))??s[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:o,tabValues:n}))),[c,m]=h({queryString:s,groupId:i}),[g,j]=function(e){let{groupId:o}=e;const s=function(e){return e?`docusaurus.tab.${e}`:null}(o),[i,n]=(0,d.Nk)(s);return[i,(0,t.useCallback)((e=>{s&&n.set(e)}),[s,n])]}({groupId:i}),f=(()=>{const e=c??g;return u({value:e,tabValues:n})?e:null})();(0,a.Z)((()=>{f&&l(f)}),[f]);return{selectedValue:r,selectValue:(0,t.useCallback)((e=>{if(!u({value:e,tabValues:n}))throw new Error(`Can't select invalid tab value=${e}`);l(e),m(e),j(e)}),[m,j,n]),tabValues:n}}var j=s(12049);const f={tabList:"tabList_c3am",tabItem:"tabItem_iDuG"};var x=s(11527);function v(e){let{className:o,block:s,selectedValue:t,selectValue:r,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,n.o5)(),d=e=>{const o=e.currentTarget,s=l.indexOf(o),i=a[s].value;i!==t&&(c(o),r(i))},m=e=>{let o=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const s=l.indexOf(e.currentTarget)+1;o=l[s]??l[0];break}case"ArrowLeft":{const s=l.indexOf(e.currentTarget)-1;o=l[s]??l[l.length-1];break}}o?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":s},o),children:a.map((e=>{let{value:o,label:s,attributes:n}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:t===o?0:-1,"aria-selected":t===o,ref:e=>l.push(e),onKeyDown:m,onClick:d,...n,className:(0,i.Z)("tabs__item",f.tabItem,n?.className,{"tabs__item--active":t===o}),children:s??o},o)}))})}function y(e){let{lazy:o,children:s,selectedValue:i}=e;const n=(Array.isArray(s)?s:[s]).filter(Boolean);if(o){const e=n.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:n.map(((e,o)=>(0,t.cloneElement)(e,{key:o,hidden:e.props.value!==i})))})}function b(e){const o=g(e);return(0,x.jsxs)("div",{className:(0,i.Z)("tabs-container",f.tabList),children:[(0,x.jsx)(v,{...e,...o}),(0,x.jsx)(y,{...e,...o})]})}function w(e){const o=(0,j.Z)();return(0,x.jsx)(b,{...e,children:m(e.children)},String(o))}},63883:(e,o,s)=>{s.d(o,{Z:()=>a,a:()=>r});var t=s(50959);const i={},n=t.createContext(i);function r(e){const o=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(n.Provider,{value:o},e.children)}}}]);