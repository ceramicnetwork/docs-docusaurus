"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7786],{2113:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=n(11527),a=n(63883);const s={},c="Ceramic HTTP client",r={id:"protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http",title:"Ceramic HTTP client",description:"The Ceramic HTTP client library can be used in browsers and Node.js to connect your application to a Ceramic node. It is actively maintained and supports the latest Ceramic features.",source:"@site/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http.md",sourceDirName:"protocol/js-ceramic/guides/ceramic-clients/javascript-clients",slug:"/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http",permalink:"/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/ceramic-http",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"protocol",previous:{title:"Clients",permalink:"/docs/protocol/js-ceramic/guides/ceramic-clients/clients-overview"},next:{title:"Ceramic HTTP API",permalink:"/docs/protocol/js-ceramic/guides/ceramic-clients/javascript-clients/http-api"}},o={},l=[{value:"Things to know",id:"things-to-know",level:2},{value:"Installation",id:"installation",level:2},{value:"Common use-cases",id:"common-use-cases",level:2},{value:"Load a single stream",id:"load-a-single-stream",level:3},{value:"Load multiple streams",id:"load-multiple-streams",level:3},{value:"Enable transactions",id:"enable-transactions",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"ceramic-http-client",children:"Ceramic HTTP client"}),"\n",(0,i.jsx)(t.p,{children:"The Ceramic HTTP client library can be used in browsers and Node.js to connect your application to a Ceramic node. It is actively maintained and supports the latest Ceramic features."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Verse",src:n(82083).Z+"",width:"1808",height:"1014"})}),"\n",(0,i.jsx)(t.h2,{id:"things-to-know",children:"Things to know"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The client is read-only by default, to enable transactions a ",(0,i.jsx)(t.a,{href:"/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-jsonrpc",children:"DID client"})," needs to be attached to the Ceramic client instance."]}),"\n",(0,i.jsxs)(t.li,{children:["Ceramic streams can be identified by a ",(0,i.jsx)(t.strong,{children:"stream ID"})," or a ",(0,i.jsx)(t.strong,{children:"commit ID"}),". A ",(0,i.jsx)(t.strong,{children:"stream ID"})," is generated when creating the stream and can be used to load the ",(0,i.jsx)(t.strong,{children:"latest version"})," of the stream, while a ",(0,i.jsx)(t.strong,{children:"commit ID"})," represents a ",(0,i.jsx)(t.strong,{children:"specific version"})," of the stream."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npm install @ceramicnetwork/http-client\n"})}),"\n",(0,i.jsx)(t.h2,{id:"common-use-cases",children:"Common use-cases"}),"\n",(0,i.jsx)(t.h3,{id:"load-a-single-stream",children:"Load a single stream"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"// Import the client\nimport { CeramicClient } from '@ceramicnetwork/http-client'\n\n// Connect to a Ceramic node\nconst ceramic = new CeramicClient('https://your-ceramic-node.com')\n\n// The `id` argument can be a stream ID (to load the latest version)\n// or a commit ID (to load a specific version)\nasync function load(id) {\n  return await ceramic.loadStream(id)\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"load-multiple-streams",children:"Load multiple streams"}),"\n",(0,i.jsxs)(t.p,{children:["Rather than using the ",(0,i.jsx)(t.code,{children:"loadStream"})," method multiple times with ",(0,i.jsx)(t.code,{children:"Promise.all()"})," to load multiple streams at once, a ",(0,i.jsx)(t.strong,{children:"more efficient way for loading multiple streams"})," is to use the ",(0,i.jsx)(t.code,{children:"multiQuery"})," method."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"// Import the client\nimport { CeramicClient } from '@ceramicnetwork/http-client'\n\n// Connect to a Ceramic node\nconst ceramic = new CeramicClient('https://your-ceramic-node.com')\n\n// The `ids` argument can contain an arry of stream IDs (to load the latest version)\n// or commit IDs (to load a specific version)\nasync function loadMulti(ids = []) {\n  const queries = ids.map((streamId) => ({ streamId }))\n  // This will return an Object of stream ID keys to stream values\n  return await ceramic.multiQuery(queries)\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"enable-transactions",children:"Enable transactions"}),"\n",(0,i.jsxs)(t.p,{children:["In order to create and update streams, the Ceramic client instance must be able to sign transaction payloads by using an authenticated DID instance. The ",(0,i.jsx)(t.a,{href:"/docs/protocol/js-ceramic/guides/ceramic-clients/authentication/did-jsonrpc",children:"DID client documentation"})," describes the process of authenticating and attaching a DID instance to the Ceramic instance."]})]})}function m(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},82083:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/verse-f12cb1961ba454832fe048464601fa0f.png"},63883:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>c});var i=n(50959);const a={},s=i.createContext(a);function c(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);