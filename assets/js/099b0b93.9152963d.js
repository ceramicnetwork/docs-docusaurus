(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4209],{85317:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>W,contentTitle:()=>G,default:()=>_,frontMatter:()=>O,metadata:()=>Z,toc:()=>F});var i=t(11527),o=t(63883),r=t(50959),a=t(12049),s=t(70912),c=t(35268),d=t(97688);const l={values:[{title:"Profile Index",query:"# gets the first 10 indexed BasicProfile instances\n\nquery ProfileIndex {\n  basicProfileIndex(first: 10) {\n    edges {\n      node {\n        id\n        author{\n          id\n        }\n        username\n        description\n        gender\n        emoji\n      }\n    }\n  }\n}"},{title:"Known Did",query:'# gets the BasicProfile instance (if exists) \n# known pkh:did (using chainID 1 for Eth Mainnet) \n\nquery KnownDid {\n  node(id: "did:pkh:eip155:1:0xc362c16a0dcbea78fb03a8f97f56deea905617bb") {\n  ... on CeramicAccount {\n        basicProfile {\n          id\n          name\n          username\n          description\n          gender\n          emoji\n        }\n      }\n  \t}\n\t}'},{title:"Profile with Posts",query:"# gets the first 10 indexed BasicProfile instances\n\n# gets the first 5 posts published by each of the \n# 10 BasicProfile instances (if exists)\n\nquery WithPosts {\n  basicProfileIndex(first: 10) {\n    edges {\n      node {\n        username\n        posts(first: 5) {\n          edges {\n            node {\n              body\n              created\n            }\n          }\n        }\n      }\n    }\n  }\n}"},{title:"Profile with Comments on Posts",query:"# gets the first 10 indexed BasicProfile instances\n\n# gets the first 5 posts published by each of the \n# 10 BasicProfile instances (if exists)\n\n# gets the first 10 responses corresponding to each\n# of the 5 posts (if exists) \n\n# gets the corresponding BasicProfile instance for\n# each response & prints only the username property \n\nquery WithComments {\n  basicProfileIndex(first: 10) {\n    edges {\n      node {\n        username\n        posts(first: 5) {\n          edges {\n            node {\n              body\n              created\n              responses(first: 10) {\n                edges {\n                  node {\n                    comment\n                    created\n                    profile {\n                      username\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"},{title:"Known Stream",query:'# gets the BasicProfile instance (if exists) \n# based on a known StreamID\n\nquery KnownStream {\n  node(id: "k2t6wzhkhabz3a7xz88mk93y1q2waejk1w2b5rs3kc82e42dgpe4l1h4mcibih") {\n    ... on BasicProfile {\n      id\n      username\n      description\n      gender\n      emoji\n    }\n  }\n}'}]},p={values:[{title:"Posts Index",query:"# gets the first 10 indexed Posts instances\n\n# gets the last 1 indexed Responses instance corresponding\n# to each of the 10 Posts instances (if exists)\n\n# gets the corresponding BasicProfile instance for\n# each response & prints only the username property \n\nquery PostsIndex{\n  postsIndex(first: 10) {\n    edges {\n      node {\n        id\n        body\n        tag\n        created\n        profile {\n          username\n        }\n        author{\n          id\n        }\n        responses(last: 1) {\n          edges {\n            node {\n              comment\n              created\n              profile {\n                username\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"},{title:"Known DID",query:'# gets the first 100 Posts instances (if exists) \n# for known pkh:did (using chainID 11155111 for Sepolia)\n\n# gets the BasicProfile instance corresponding to\n# each Posts instance\n\n# gets the first 5 Responses instances (if exists)\n# for each of the 100 Posts and prints both the\n# comment and created field\n\nquery KnownDid{\n  node(id: "did:pkh:eip155:11155111:0x8071f6f971b438f7c0ea72c950430ee7655fabce") {\n      ... on CeramicAccount {\n      id\n      postsList(first: 100) {\n        edges {\n        node {\n            id\n            body\n            created\n            profile {\n              username\n            }\n          \tresponses(first: 5){\n              edges{\n                node{\n                  comment\n                  created\n                }\n              }\n          \t}\n          }\n        }\n      }\n    } \n  }\n}'},{title:"Tag Filtered",query:'# gets the first 10 indexed Posts instances (if exists)\n# using a filter that grabs only the Posts instances\n# that have a tag property equal to "Governance"\n\n# also gets the BasicProfile instance and corresponding\n# username property for each of those Posts instances\n\nquery TagFiltered {\n  postsIndex(filters: { where: { tag: { equalTo: "Governance" } } }, first: 10) {\n    edges {\n      node {\n        body\n        created\n        profile {\n          username\n        }\n      }\n    }\n  }\n}'},{title:"Date Filtered",query:'# gets the last 10 indexed Posts instances (if exists)\n# using a filter that grabs only the Posts instances\n# that have a created property greater than "2022-05-10T14:15:00Z"\n\n# also gets the BasicProfile instance and corresponding\n# username property for each of those Posts instances\n\nquery DateFiltered {\n  postsIndex(filters: { where: { created: { greaterThan: "2022-05-10T14:15:00Z" } } }, last: 10) {\n    edges {\n      node {\n        body\n        created\n        profile {\n          username\n        }\n      }\n    }\n  }\n}'},{title:"Combine Filters",query:'# gets the first 20 indexed Posts instances (if exists)\n# using a double filter that grabs only the Posts instances\n# that have a created property greater than "2022-05-10T14:15:00Z"\n# AND a tag property equal to "Governance"\n\nquery CombineFilters {\n  postsIndex(\n    filters: {\n      and: [\n        { where: { created: { greaterThan: "2022-05-10T14:15:00Z" } } }\n        { and: { where: { tag: { equalTo: "Governance" } } } }\n      ]\n    }\n    first: 20\n  ) {\n    edges {\n      node {\n        body\n        created\n        tag\n      }\n    }\n  }\n}'}]},h={values:[{title:"Test Post Query",query:"# let's start with a simple query\n\nquery PostsIndex{\n  postsIndex(first: 10) {\n    edges {\n      node {\n        id\n        body\n        tag\n        created\n        author{\n          id\n        }\n        }\n      }\n    }\n  }"}]},u={values:[{title:"Comments With Posts",query:"# gets the last 20 indexed Comments instances (if exists)\n\n# gets the corresponding Posts instance that the comment\n# is responding to\n\n# gets the BasicProfile instance and its username property\n# corresponding to the Posts instance\n\nquery CommentsWithPost {\n    commentsIndex(last: 20) {\n      edges {\n        node {\n          comment\n          post {\n            body\n            profile {\n              username\n            }\n          }\n        }\n      }\n    }\n  }"},{title:"Ordered Comments",query:"# gets the first 10 indexed Comments instances (if exists)\n# based on sorting by each instance's created (date) field\n# in ascending order\n\n# gets the corresponding Posts instance that the comment\n# is responding to\n\n# gets the BasicProfile instance and its username property\n# corresponding to the Posts instance\n\nquery OrderedComments {\n    commentsIndex(sorting: { created: ASC }, first: 10) {\n      edges {\n        node {\n          comment\n          created\n          post {\n            body\n            profile {\n              username\n            }\n          }\n        }\n      }\n    }\n  }"}]},m={models:{BasicProfile:{id:"kjzl6hvfrbw6c8i6k87cma2gvbnw3hgz2j2tc0hmc6yzzc1zikbwsryulsnmmak",accountRelation:{type:"single"}},Posts:{id:"kjzl6hvfrbw6cags7lvf5ajsgdfqwnnhoyp5fr3fhmitskk0ksydeaspzxckpub",accountRelation:{type:"list"}},Following:{id:"kjzl6hvfrbw6c930807bvmzvcqkqv6ni1q2jhv5bc59hima9r9ci1zk22tpxq3v",accountRelation:{type:"list"}},Comments:{id:"kjzl6hvfrbw6cb3x190263pxlza37ls1gxizt1ea21gtr9xwp7qln05elotk0h8",accountRelation:{type:"list"}}},objects:{BasicProfile:{name:{type:"string",required:!0},emoji:{type:"string",required:!1},gender:{type:"string",required:!1},username:{type:"string",required:!0},description:{type:"string",required:!1},posts:{type:"view",viewType:"relation",relation:{source:"queryConnection",model:"kjzl6hvfrbw6cags7lvf5ajsgdfqwnnhoyp5fr3fhmitskk0ksydeaspzxckpub",property:"profileId"}},author:{type:"view",viewType:"documentAccount"}},Posts:{tag:{type:"string",required:!0,indexed:!0},body:{type:"string",required:!0},edited:{type:"datetime",required:!1,indexed:!0},created:{type:"datetime",required:!0,indexed:!0},profileId:{type:"streamid",required:!0},profile:{type:"view",viewType:"relation",relation:{source:"document",model:"kjzl6hvfrbw6c8i6k87cma2gvbnw3hgz2j2tc0hmc6yzzc1zikbwsryulsnmmak",property:"profileId"}},responses:{type:"view",viewType:"relation",relation:{source:"queryConnection",model:"kjzl6hvfrbw6cb3x190263pxlza37ls1gxizt1ea21gtr9xwp7qln05elotk0h8",property:"postId"}},author:{type:"view",viewType:"documentAccount"}},Following:{profileId:{type:"streamid",required:!0},profile:{type:"view",viewType:"relation",relation:{source:"document",model:"kjzl6hvfrbw6c8i6k87cma2gvbnw3hgz2j2tc0hmc6yzzc1zikbwsryulsnmmak",property:"profileId"}}},Comments:{edited:{type:"datetime",required:!1,indexed:!0},postId:{type:"streamid",required:!0},comment:{type:"string",required:!0},created:{type:"datetime",required:!0,indexed:!0},profileId:{type:"streamid",required:!0},post:{type:"view",viewType:"relation",relation:{source:"document",model:"kjzl6hvfrbw6cags7lvf5ajsgdfqwnnhoyp5fr3fhmitskk0ksydeaspzxckpub",property:"postId"}},profile:{type:"view",viewType:"relation",relation:{source:"document",model:"kjzl6hvfrbw6c8i6k87cma2gvbnw3hgz2j2tc0hmc6yzzc1zikbwsryulsnmmak",property:"profileId"}}}},enums:{},accountData:{basicProfile:{type:"node",name:"BasicProfile"},postsList:{type:"connection",name:"Posts"},followingList:{type:"connection",name:"Following"},commentsList:{type:"connection",name:"Comments"}}};var g=t(19845);const y=async e=>{d.ZP.initialize("G-426ZZLPJPW");const n=new c.e({ceramic:"https://ceramic-temp.hirenodes.io",definition:m}),t=await n.executeQuery(`${e.query}`);if(t.errors&&(d.ZP.event({category:"sandbox-query",action:"query-error"}),d.ZP.event({category:"sandbox-query",action:"query-all"})),!t.data.__schema){d.ZP.event({category:"sandbox-query",action:"query-success"}),d.ZP.event({category:"sandbox-query",action:"query-all"});const e=await(async()=>{const{ethereum:e}=window;if(!e)return"";const n=await e.request({method:"eth_accounts"});if(0!==n.length)return n[0];return""})();if(e.length>0){const n=await(async e=>{try{const n=await fetch("https://walrus-app-f7xa9.ondigitalocean.app/multi/getAggregations",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({recipient:`did:pkh:eip155:1:${e}`,context:"read"})}).then((e=>e.json()));if(console.log(n),n&&!n.contextTotal){const n=await fetch("https://walrus-app-f7xa9.ondigitalocean.app/multi/aggregate",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({recipient:`did:pkh:eip155:1:${e}`,context:"read",amount:1})}).then((e=>e.json()));if(n&&n.contextTotal)return n.contextTotal}return}catch(n){console.log(n)}})(e.toLowerCase());n&&(console.log("Read point created! ",n),window.dispatchEvent(new Event("point")))}return t.data}},f={profiles:l,comments:u,posts:p,begin:h};function x(e){return(0,a.Z)()?(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(g.I3,{children:(0,i.jsx)("div",{style:{height:"60rem",width:"100%",margin:"auto"},children:(0,i.jsx)(s.yB,{defaultTabs:f[e.queries].values,storage:null,fetcher:y})})}),(0,i.jsx)(g.$,{children:(0,i.jsx)("div",{style:{height:"30rem",width:"100%",margin:"auto"},children:(0,i.jsx)(s.yB,{defaultTabs:f[e.queries].values,storage:null,fetcher:y,style:{transform:"scale(.5)"}})})})]}):(0,i.jsx)("div",{children:"loading..."})}const v={values:[{title:"Dev One",query:'\n\nmutation DeveloperOne {\n  setCeramicDev(input: {\n    content: {\n      languages: {\n        JavaScript: Expert\n        Solidity: Advanced\n        Python: Intermediate\n      }\n      context: "sandbox"\n    }\n  })\n  {\n    document {\n      developer {\n        id\n      }\n      languages {\n        JavaScript\n        Solidity\n        Python\n      }\n    }\n  }\n}'},{title:"Dev Two",query:'\n\nmutation DeveloperTwo {\n  setCeramicDev(input: {\n    content: {\n      languages: {\n        Rust: Expert\n        Swift: Advanced\n        WebAssembly: Beginner\n      }\n      context: "sandbox"\n    }\n  })\n  {\n    document {\n      developer {\n        id\n      }\n      languages {\n        Rust\n        Swift\n        WebAssembly\n      }\n    }\n  }\n}'},{title:"Dev Three",query:'\n\nmutation DeveloperThree {\n  setCeramicDev(input: {\n    content: {\n      languages: {\n        Go: Advanced\n        Cpp: Expert\n        Java: Intermediate\n      }\n      context: "sandbox"\n    }\n  })\n  {\n    document {\n      developer {\n        id\n      }\n      languages {\n        Go\n        Cpp\n        Java\n      }\n    }\n  }\n}'}]};var b=t(64588);const w={models:{AttestToDev:{interface:!1,implements:[],id:"kjzl6hvfrbw6c7ydwrii3rw8rca48n4za1unqwjrhnellwjrpc9m5q7o0v1xpdz",accountRelation:{type:"set",fields:["attestedProfileId"]}},CeramicDev:{interface:!1,implements:[],id:"kjzl6hvfrbw6c7ylw5pv7wk8rw98ohqe4qgdj1hy206rv97p9tsrqoplh540a3o",accountRelation:{type:"set",fields:["context"]}}},objects:{AttestToDev:{signal:{type:"boolean",required:!0,immutable:!1},attestedProfileId:{type:"streamid",required:!0,immutable:!0},profile:{type:"view",viewType:"relation",relation:{source:"document",model:"kjzl6hvfrbw6c7ylw5pv7wk8rw98ohqe4qgdj1hy206rv97p9tsrqoplh540a3o",property:"attestedProfileId"}},attester:{type:"view",viewType:"documentAccount"}},CeramicDev:{context:{type:"string",required:!0,immutable:!0},languages:{type:"reference",refType:"object",refName:"Language",required:!0,immutable:!1},developer:{type:"view",viewType:"documentAccount"},attestations:{type:"view",viewType:"relation",relation:{source:"queryConnection",model:"kjzl6hvfrbw6c7ydwrii3rw8rca48n4za1unqwjrhnellwjrpc9m5q7o0v1xpdz",property:"attestedProfileId"}}},Language:{Go:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Cpp:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Java:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Rust:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Other:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Scala:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Swift:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Python:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Solidity:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},JavaScript:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},WebAssembly:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1}}},enums:{Proficiency:["Beginner","Intermediate","Advanced","Expert"]},accountData:{attestToDev:{type:"set",name:"AttestToDev"},attestToDevList:{type:"connection",name:"AttestToDev"},ceramicDev:{type:"set",name:"CeramicDev"},ceramicDevList:{type:"connection",name:"CeramicDev"}}},j=async e=>{d.ZP.initialize("G-426ZZLPJPW");const n=new c.e({ceramic:"https://experiments.ceramic.dev/",definition:w}),t=localStorage.getItem("ceramic:eth_did");let i;t&&(i=await b.GJ.fromSession(t)),i&&i.hasSession&&!i.isExpired&&n.setDID(i.did);const o=await n.executeQuery(`${e.query}`);if(o.errors&&(d.ZP.event({category:"sandbox-query",action:"query-error"}),d.ZP.event({category:"sandbox-query",action:"query-all"})),!o.data.__schema){d.ZP.event({category:"sandbox-query",action:"mutation-success"}),d.ZP.event({category:"sandbox-query",action:"query-all"});const e=await(async()=>{const{ethereum:e}=window;if(!e)return"";const n=await e.request({method:"eth_accounts"});if(0!==n.length)return n[0];return""})();if(e.length>0){const n=await(async e=>{try{const n=await fetch("https://walrus-app-f7xa9.ondigitalocean.app/multi/getAggregations",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({recipient:`did:pkh:eip155:1:${e}`,context:"mutationSandbox"})}).then((e=>e.json()));if(console.log(n),n&&!n.contextTotal){const n=await fetch("https://walrus-app-f7xa9.ondigitalocean.app/multi/aggregate",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({recipient:`did:pkh:eip155:1:${e}`,context:"mutationSandbox",amount:5})}).then((e=>e.json()));if(n&&n.contextTotal)return n.contextTotal}return}catch(n){console.log(n)}})(e.toLowerCase());n&&(console.log("Write point created! ",n),window.dispatchEvent(new Event("point")),window.dispatchEvent(new Event("mutation")))}return o.data}},P={mutations:v};function q(e){return(0,a.Z)()?(0,i.jsx)(s.yB,{defaultTabs:P[e.queries].values,storage:null,fetcher:j}):(0,i.jsx)("div",{children:"loading..."})}var k=t(5593);function S(){const[e,n]=(0,r.useState)(!1),[t,o]=(0,r.useState)(!1),[s,d]=(0,r.useState)(""),[l,p]=(0,r.useState)(""),h=(0,a.Z)(),u=new c.e({ceramic:"https://ceramic-temp.hirenodes.io",definition:w}),m=async()=>{try{const{ethereum:e}=window;if(!e)return void alert("Get MetaMask -> https://metamask.io/");const t=await e.request({method:"eth_requestAccounts"});console.log("Connected",t[0]),d(t[0].toLowerCase()),await(async()=>{const e=localStorage.getItem("ceramic:eth_did");let t;if(e&&(t=await b.GJ.fromSession(e)),!t||t.hasSession&&t.isExpired){const e=window.ethereum;console.log("requesting accounts");const n=await e.enable({method:"eth_requestAccounts"}),i=await(0,k._4)(e,n[0]);console.log("accountId",i);const o=await k.$2.getAuthMethod(e,i);t=await b.GJ.authorize(o,{resources:[u.resources[1]]}),localStorage.setItem("ceramic:eth_did",t.serialize()),localStorage.setItem("parent_did",t.did._parentId)}t&&t.hasSession&&!t.isExpired?(n(!0),p("ceramicConnected")):n(!1)})(),p("connected")}catch(e){console.log(e)}};return(0,r.useEffect)((()=>{(async()=>{const{ethereum:e}=window,t=localStorage.getItem("ceramic:eth_did");let i;if(t&&(i=await b.GJ.fromSession(t)),i&&i.hasSession&&!i.isExpired&&n(!0),!e)return void console.log("Make sure you have metamask!");console.log("We have the ethereum object",e);const r=await e.request({method:"eth_accounts"});if(0!==r.length){const e=r[0];console.log("Found an authorized account:",e),d(e.toLowerCase()),p("connected")}else console.log("No authorized account found");o(!0)})()}),[]),h&&"connected"!==l?(0,i.jsx)("button",{onClick:async()=>m(),style:{borderRadius:".75rem",marginBottom:"1rem",border:"none",backgroundColor:"#F05027",color:"white",height:"2rem",width:"8rem",fontWeight:"bold"},children:"Connect Wallet"}):(0,i.jsx)("button",{onClick:async()=>{m()},style:{borderRadius:".75rem",marginBottom:"1rem",border:"none",backgroundColor:"#F05027",color:"white",height:"2rem",width:"8rem",fontWeight:"bold"},children:t&&e?"Connected":t&&"connected"===l?"Authenticate on Ceramic":t?"Connect Wallet":"Loading"})}const T={models:{AttestToDev:{interface:!1,implements:[],id:"kjzl6hvfrbw6c7ydwrii3rw8rca48n4za1unqwjrhnellwjrpc9m5q7o0v1xpdz",accountRelation:{type:"set",fields:["attestedProfileId"]}},CeramicDev:{interface:!1,implements:[],id:"kjzl6hvfrbw6c7ylw5pv7wk8rw98ohqe4qgdj1hy206rv97p9tsrqoplh540a3o",accountRelation:{type:"set",fields:["context"]}},GenericPointAllocation:{interface:!0,implements:[],id:"kjzl6hvfrbw6c6m3n64vb2h4n8nxq9jjfb7sf7a9y893spm1pjd0enrsdlyphg4",accountRelation:{type:"none"}},MultiplePoints:{interface:!1,implements:["kjzl6hvfrbw6ca7buvthejhv7vqr85vmpsepzj0mc6665y2zarvjbuvtm3v4kah","kjzl6hvfrbw6c6m3n64vb2h4n8nxq9jjfb7sf7a9y893spm1pjd0enrsdlyphg4"],id:"kjzl6hvfrbw6c9fmjjdsbuxnewf0yhvco3dn5mihiogeso6i1csdbw2fq8oeijy",accountRelation:{type:"list"}},MultiplePointsAllocation:{interface:!0,implements:["kjzl6hvfrbw6c6m3n64vb2h4n8nxq9jjfb7sf7a9y893spm1pjd0enrsdlyphg4"],id:"kjzl6hvfrbw6ca7buvthejhv7vqr85vmpsepzj0mc6665y2zarvjbuvtm3v4kah",accountRelation:{type:"none"}},PointsAggregation:{interface:!0,implements:[],id:"kjzl6hvfrbw6cb6393dpd8blke5w8r7pvbl4449mxetuibcav3oab8fnxmys6d6",accountRelation:{type:"none"}},SandboxPointsAggregation:{interface:!1,implements:["kjzl6hvfrbw6cb6393dpd8blke5w8r7pvbl4449mxetuibcav3oab8fnxmys6d6"],id:"kjzl6hvfrbw6ca6atwn59x2zltapkaf4dy9v0laqk4ahj5hf337s6rocgia2rxs",accountRelation:{type:"set",fields:["recipient","context"]}},SinglePoint:{interface:!1,implements:["kjzl6hvfrbw6c7ilzfpjw96drd04jadb0aybiklk70ys2imxp5mjbjmgkecgddf","kjzl6hvfrbw6c6m3n64vb2h4n8nxq9jjfb7sf7a9y893spm1pjd0enrsdlyphg4"],id:"kjzl6hvfrbw6c9332q9di7qfshxczet94w2tzeubvkbkk9vtuwmya6s9f1bvx9p",accountRelation:{type:"list"}},SinglePointAllocation:{interface:!0,implements:["kjzl6hvfrbw6c6m3n64vb2h4n8nxq9jjfb7sf7a9y893spm1pjd0enrsdlyphg4"],id:"kjzl6hvfrbw6c7ilzfpjw96drd04jadb0aybiklk70ys2imxp5mjbjmgkecgddf",accountRelation:{type:"none"}},TotalPoints:{interface:!1,implements:["kjzl6hvfrbw6cb6393dpd8blke5w8r7pvbl4449mxetuibcav3oab8fnxmys6d6"],id:"kjzl6hvfrbw6c5be4exsm7nkkksnqatki8bceyvbgtmcu2bu5vign23b7x4emlb",accountRelation:{type:"set",fields:["recipient"]}}},objects:{AttestToDev:{signal:{type:"boolean",required:!0,immutable:!1},attestedProfileId:{type:"streamid",required:!0,immutable:!0},profile:{type:"view",viewType:"relation",relation:{source:"document",model:"kjzl6hvfrbw6c7ylw5pv7wk8rw98ohqe4qgdj1hy206rv97p9tsrqoplh540a3o",property:"attestedProfileId"}},attester:{type:"view",viewType:"documentAccount"}},CeramicDev:{context:{type:"string",required:!0,immutable:!0},languages:{type:"reference",refType:"object",refName:"Language",required:!0,immutable:!1},developer:{type:"view",viewType:"documentAccount"},attestations:{type:"view",viewType:"relation",relation:{source:"queryConnection",model:"kjzl6hvfrbw6c7ydwrii3rw8rca48n4za1unqwjrhnellwjrpc9m5q7o0v1xpdz",property:"attestedProfileId"}}},Language:{Go:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Cpp:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Java:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Rust:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Other:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Scala:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Swift:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Python:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},Solidity:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},JavaScript:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1},WebAssembly:{type:"reference",refType:"enum",refName:"Proficiency",required:!1,immutable:!1}},GenericPointAllocation:{recipient:{type:"did",required:!0,immutable:!1},issuer:{type:"view",viewType:"documentAccount"}},MultiplePoints:{points:{type:"integer",required:!0,immutable:!1},recipient:{type:"did",required:!0,immutable:!1},issuer:{type:"view",viewType:"documentAccount"}},MultiplePointsAllocation:{points:{type:"integer",required:!0,immutable:!1},recipient:{type:"did",required:!0,immutable:!1},issuer:{type:"view",viewType:"documentAccount"}},PointsAggregation:{date:{type:"datetime",required:!0,immutable:!1},points:{type:"integer",required:!0,immutable:!1},recipient:{type:"did",required:!0,immutable:!1},issuer:{type:"view",viewType:"documentAccount"}},SandboxPointsAggregation:{date:{type:"datetime",required:!0,immutable:!1},points:{type:"integer",required:!0,immutable:!1},context:{type:"string",required:!0,immutable:!0},recipient:{type:"did",required:!0,immutable:!0},issuer:{type:"view",viewType:"documentAccount"}},SinglePoint:{recipient:{type:"did",required:!0,immutable:!1},issuer:{type:"view",viewType:"documentAccount"}},SinglePointAllocation:{recipient:{type:"did",required:!0,immutable:!1},issuer:{type:"view",viewType:"documentAccount"}},TotalPoints:{date:{type:"datetime",required:!0,immutable:!1},points:{type:"integer",required:!0,immutable:!1},recipient:{type:"did",required:!0,immutable:!0},issuer:{type:"view",viewType:"documentAccount"}}},enums:{Proficiency:["Beginner","Intermediate","Advanced","Expert"]},accountData:{attestToDev:{type:"set",name:"AttestToDev"},attestToDevList:{type:"connection",name:"AttestToDev"},ceramicDev:{type:"set",name:"CeramicDev"},ceramicDevList:{type:"connection",name:"CeramicDev"},genericPointAllocationList:{type:"connection",name:"GenericPointAllocation"},multiplePointsAllocationList:{type:"connection",name:"MultiplePointsAllocation"},multiplePointsList:{type:"connection",name:"MultiplePoints"},pointsAggregationList:{type:"connection",name:"PointsAggregation"},recipientOfGenericPointAllocationList:{type:"account",name:"GenericPointAllocation",property:"recipient"},recipientOfMultiplePointsAllocationList:{type:"account",name:"MultiplePointsAllocation",property:"recipient"},recipientOfMultiplePointsList:{type:"account",name:"MultiplePoints",property:"recipient"},recipientOfPointsAggregationList:{type:"account",name:"PointsAggregation",property:"recipient"},recipientOfSandboxPointsAggregation:{type:"account-set",name:"SandboxPointsAggregation",property:"recipient"},recipientOfSandboxPointsAggregationList:{type:"account",name:"SandboxPointsAggregation",property:"recipient"},recipientOfSinglePointAllocationList:{type:"account",name:"SinglePointAllocation",property:"recipient"},recipientOfSinglePointList:{type:"account",name:"SinglePoint",property:"recipient"},recipientOfTotalPoints:{type:"account-set",name:"TotalPoints",property:"recipient"},recipientOfTotalPointsList:{type:"account",name:"TotalPoints",property:"recipient"},sandboxPointsAggregation:{type:"set",name:"SandboxPointsAggregation"},sandboxPointsAggregationList:{type:"connection",name:"SandboxPointsAggregation"},singlePointAllocationList:{type:"connection",name:"SinglePointAllocation"},singlePointList:{type:"connection",name:"SinglePoint"},totalPoints:{type:"set",name:"TotalPoints"},totalPointsList:{type:"connection",name:"TotalPoints"}}},C=new c.e({ceramic:"https://experiments.ceramic.dev/",definition:T});function D(){const[e,n]=(0,r.useState)(!1),[t,o]=(0,r.useState)(!1),[s,c]=(0,r.useState)(!1),[d,l]=(0,r.useState)(!1),[p,h]=(0,r.useState)(""),[u,m]=(0,r.useState)(""),[g,y]=(0,r.useState)(""),f=(0,a.Z)(),x={"0x1":"Mainnet","0x3":"Ropsten","0x2a":"Kovan","0x4":"Rinkeby","0x5":"Goerli","0x61":"BSC Testnet","0x38":"BSC Mainnet","0x89":"Polygon Mainnet","0x13881":"Polygon Mumbai Testnet","0xa86a":"AVAX Mainnet","0xaa36a7":"Sepolia"},v=async()=>{try{const{ethereum:e}=window;if(!e)return void alert("Get MetaMask -> https://metamask.io/");const n=await e.request({method:"eth_requestAccounts"});console.log("Connected",n[0]),h(n[0]),m("Connected")}catch(e){console.log(e)}},b=async()=>{const{ethereum:e}=window;if(!e)return void console.log("Make sure you have metamask!");console.log("We have the ethereum object",e);const t=await e.request({method:"eth_accounts"});if(0!==t.length){const e=t[0];console.log("Found an authorized account:",e),h(e);const n=await(async e=>{try{const n=await fetch("https://walrus-app-f7xa9.ondigitalocean.app/multi/getAggregations",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({recipient:`did:pkh:eip155:1:${e}`,context:"read"})}).then((e=>e.json())),t=await fetch("https://walrus-app-f7xa9.ondigitalocean.app/multi/getAggregations",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({recipient:`did:pkh:eip155:1:${e}`,context:"mutationSandbox"})}).then((e=>e.json()));return{read:n,mutationSandbox:t,mutationRepo:await fetch("https://walrus-app-f7xa9.ondigitalocean.app/multi/getAggregations",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({recipient:`did:pkh:eip155:1:${e}`,context:"mutationRepo"})}).then((e=>e.json()))}}catch(n){console.log(n)}})(e);if(n)if(n.read.contextTotal&&o(!0),n.mutationSandbox.contextTotal&&c(!0),n.mutationRepo.contextTotal)l(!0);else{const n=await(async e=>{try{const n=await C.executeQuery(`\n      query Attestations {\n        node(id: "did:pkh:eip155:1:${e}") {\n          ... on CeramicAccount {\n            id\n            attestToDevList(first: 10) {\n              edges {\n                node {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    `);if(n.data&&n.data.node&&n.data.node.attestToDevList)return n.data.node.attestToDevList.edges}catch(n){console.log(n)}})(e);if(n&&n.length){const n=await(async e=>{try{const n=await fetch("https://walrus-app-f7xa9.ondigitalocean.app/multi/aggregate",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({recipient:`did:pkh:eip155:1:${e}`,context:"mutationRepo",amount:10})}).then((e=>e.json()));return n&&n.contextTotal?n.contextTotal:void 0}catch(n){console.log(n)}})(e.toLowerCase());n&&(console.log("Repo mutation point created! ",n),window.dispatchEvent(new Event("point")))}}m("Connected")}else console.log("No authorized account found");const i=await e.request({method:"eth_chainId"});if(y(x[i]),"0x1"===i){const e=t[0];localStorage.setItem("address",e)}n(!0)};return(0,r.useEffect)((()=>{b(),window.addEventListener("point",(function(e){console.log(e),b()}))}),[]),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)("div",{style:{display:"flex",flexDirection:"column",padding:"10px",height:"fit-content",width:"100%",borderRadius:".5rem",boxShadow:"rgba(0, 0, 0, 0.35) 0px 5px 15px"},children:[(0,i.jsxs)("div",{style:{display:"flex",flexDirection:"row",padding:"10px",justifyContent:"space-between",width:"90%",margin:"auto"},children:[(0,i.jsxs)("div",{style:{display:"flex",flexDirection:"column"},children:[(0,i.jsx)("p",{children:"Read Query"}),(0,i.jsxs)("p",{style:{fontSize:"0.8rem"},children:[" ","Use the GraphiQL modules below to view existing data"]})]}),"Connected"===u&&"Mainnet"===g&&t?(0,i.jsx)("p",{children:"1/1 Point(s) Earned \u2705"}):"Connected"!==u||"Mainnet"!==g||t?(0,i.jsx)("p",{children:"Not Connected"}):(0,i.jsx)("p",{children:"0/1 Point(s) Earned"})]}),(0,i.jsxs)("div",{style:{display:"flex",flexDirection:"row",padding:"10px",justifyContent:"space-between",width:"90%",margin:"auto"},children:[(0,i.jsxs)("div",{style:{display:"flex",flexDirection:"column"},children:[(0,i.jsx)("p",{children:"Sandbox Mutation Query"}),(0,i.jsxs)("p",{style:{fontSize:"0.8rem"},children:[" ",'Use the GraphiQL modules within the "Writing Data" section to create new data']})]}),"Connected"===u&&"Mainnet"===g&&s?(0,i.jsx)("p",{children:"5/5 Point(s) Earned \u2705"}):"Connected"!==u||"Mainnet"!==g||s?(0,i.jsx)("p",{children:"Not Connected"}):(0,i.jsx)("p",{children:"0/5 Point(s) Earned"})]}),(0,i.jsxs)("div",{style:{display:"flex",flexDirection:"row",padding:"10px",justifyContent:"space-between",width:"90%",margin:"auto"},children:[(0,i.jsxs)("div",{style:{display:"flex",flexDirection:"column"},children:[(0,i.jsx)("p",{children:"Sandbox Extension Mutation Query"}),(0,i.jsxs)("p",{style:{fontSize:"0.8rem"},children:[" ",'Clone the reposority found in the "Writing Data" section to create new data']})]}),"Connected"===u&&"Mainnet"===g&&d?(0,i.jsx)("p",{children:"10/10 Point(s) Earned \u2705"}):"Connected"!==u||"Mainnet"!==g||d?(0,i.jsx)("p",{children:"Not Connected"}):(0,i.jsx)("p",{children:"0/10 Point(s) Earned"})]})]})," ",f&&e&&"Connected"!==u?(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)("p",{style:{marginTop:"1rem"},children:"Connect your wallet to earn points"}),(0,i.jsx)("button",{style:{marginBottom:"1rem",borderRadius:".75rem",border:"none",backgroundColor:"#F05027",color:"white",height:"2rem",width:"8rem",fontWeight:"bold"},onClick:async()=>v(),children:"Connect Wallet"})]}):f&&e&&"Connected"===u&&"Mainnet"!==g?(0,i.jsx)("button",{onClick:async()=>{(async()=>{if(window.ethereum)try{await window.ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:"0x1"}]});const e=await ethereum.request({method:"eth_chainId"});if(y(x[e]),"0x1"===e){const e=await ethereum.request({method:"eth_accounts"});localStorage.setItem("address",e[0])}}catch(e){if(4902===e.code)try{await window.ethereum.request({method:"wallet_addEthereumChain",params:[{chainId:"1",chainName:"Mainnet",rpcUrls:["https://ethereum-rpc.publicnode.com"],nativeCurrency:{name:"ETH",symbol:"ETH",decimals:18},blockExplorerUrls:["https://etherscan.io/"]}]})}catch(e){console.log(e)}console.log(e)}else alert("MetaMask is not installed. Please install it to use this app: https://metamask.io/download.html")})()},style:{marginTop:"1rem",marginBottom:"1rem",borderRadius:".75rem",border:"none",backgroundColor:"#F05027",color:"white",height:"2rem",width:"8rem",fontWeight:"bold"},children:"Switch to Mainnet"}):(0,i.jsx)("button",{onClick:async()=>{v()},style:{marginTop:"1rem",marginBottom:"1rem",borderRadius:".75rem",border:"none",backgroundColor:"#F05027",color:"white",height:"2rem",width:"8rem",fontWeight:"bold"},children:e?u:"Loading..."})]})}var A=t(92495),I=t(70511),z=t(6937),L=t(53791),R=t(96698),B=t(88622),N=t(63374);const M=new c.e({ceramic:"https://experiments.ceramic.dev/",definition:T});function E(){const[e,n]=(0,r.useState)([]),[t,o]=(0,r.useState)(""),a=async()=>{const e=await M.executeQuery("\n        query {\n            ceramicDevIndex(last: 8){\n                edges{\n                    node{\n                        id\n                        developer {\n                          id\n                        }\n                        context\n                        languages {\n                          JavaScript \n                          Python\n                          Rust\n                          Java\n                          Swift\n                          Go\n                          Cpp\n                          Scala\n                          WebAssembly\n                          Solidity\n                          Other\n                        }\n                        attestations(first: 500){\n                            edges{\n                                node{\n                                    id\n                                    attester {\n                                      id\n                                    }\n                                  signal\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    ");if(e.data&&e.data.ceramicDevIndex&&e.data.ceramicDevIndex.edges){const t=e.data.ceramicDevIndex.edges.reverse().filter((e=>null!==e.node&&"sandbox"===e.node.context));n(t)}};return(0,r.useEffect)((()=>{try{localStorage.getItem("parent_did")&&o(localStorage.getItem("parent_did")),a(),window.addEventListener("mutation",(function(e){console.log(e);try{localStorage.getItem("parent_did")&&o(localStorage.getItem("parent_did")),a()}catch(n){console.log(n)}}))}catch(e){console.log(e)}}),[]),(0,i.jsx)(i.Fragment,{children:e.length?(0,i.jsx)(A.Z,{style:{backgroundColor:"black",width:"100%",padding:"2%",borderRadius:"5px"},children:e.map((e=>(0,i.jsxs)(I.Z,{style:{marginBottom:"2%"},children:[(0,i.jsxs)(z.Z,{style:{color:"white"},children:[e.node.developer.id===t&&(0,i.jsx)("div",{style:{color:"lightgreen"},children:"Your Profile"}),(0,i.jsx)("strong",{children:"Developer:"})," ",e.node.developer.id,(0,i.jsxs)("div",{style:{color:"lightblue"},children:[" ","Context: ",e.node.context]})]}),(0,i.jsxs)(L.Z,{children:[(0,i.jsxs)(R.Z,{children:[(0,i.jsxs)(B.Z,{children:[(0,i.jsxs)("div",{children:[null!=e.node.languages.JavaScript&&"JavaScript: "+e.node.languages.JavaScript," "]}),(0,i.jsx)("div",{children:null!==e.node.languages.Python&&"Python: "+e.node.languages.Python}),(0,i.jsx)("div",{children:null!==e.node.languages.Rust&&"Rust: "+e.node.languages.Rust}),(0,i.jsx)("div",{children:null!==e.node.languages.Java&&"Java: "+e.node.languages.Java}),(0,i.jsx)("div",{children:null!==e.node.languages.Swift&&"Swift: "+e.node.languages.Swift}),(0,i.jsx)("div",{children:null!==e.node.languages.Go&&"Go: "+e.node.languages.Go}),(0,i.jsx)("div",{children:null!==e.node.languages.Cpp&&"Cpp: "+e.node.languages.Cpp}),(0,i.jsx)("div",{children:null!==e.node.languages.Scala&&"Scala: "+e.node.languages.Scala}),(0,i.jsx)("div",{children:null!==e.node.languages.WebAssembly&&"WebAssembly: "+e.node.languages.WebAssembly}),(0,i.jsx)("div",{children:null!==e.node.languages.Solidity&&"Solidity: "+e.node.languages.Solidity}),(0,i.jsx)("div",{children:null!==e.node.languages.Other&&"Other: "+e.node.languages.Other})]}),(0,i.jsx)("div",{className:"text-sm",children:(0,i.jsxs)("p",{style:{color:"white"},children:[" ","Unique Verifications:"," ",e.node.attestations.edges.length]})})]}),(0,i.jsx)(N.Z,{})]})]},e.node.id)))}):(0,i.jsx)("div",{style:{color:"black"},children:"Loading..."})})}t(37421),t(81779);const O={title:"ComposeDB API Sandbox",description:"Test out example GraphQL queries on ComposeDB to learn how to access documents by relations, how to filter, and more."},G="Sandbox",Z={id:"composedb/sandbox",title:"ComposeDB API Sandbox",description:"Test out example GraphQL queries on ComposeDB to learn how to access documents by relations, how to filter, and more.",source:"@site/docs/composedb/sandbox.mdx",sourceDirName:"composedb",slug:"/composedb/sandbox",permalink:"/docs/composedb/sandbox",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"ComposeDB API Sandbox",description:"Test out example GraphQL queries on ComposeDB to learn how to access documents by relations, how to filter, and more."},sidebar:"composedb",previous:{title:"Getting Started",permalink:"/docs/composedb/getting-started"},next:{title:"Scaffold a new Ceramic app",permalink:"/docs/composedb/create-ceramic-app"}},W={},F=[{value:"Reading Profiles",id:"reading-profiles",level:3},{value:"Reading Posts",id:"reading-posts",level:3},{value:"Reading Comments",id:"reading-comments",level:3},{value:"Writing Data",id:"writing-data",level:2},{value:"Data Models",id:"data-models",level:4},{value:"Authentication",id:"authentication",level:4},{value:"Creating a Record",id:"creating-a-record",level:3},{value:"Developer Feed",id:"developer-feed",level:3},{value:"Write Data in a Local Environment",id:"write-data-in-a-local-environment",level:3},{value:"Next Steps",id:"next-steps",level:2}];function J(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"sandbox",children:"Sandbox"}),"\n",(0,i.jsx)(n.p,{children:"On this page, you can earn points for interacting with the Ceramic Network. Let's walk you through the potential actions you can perform while you learn!"}),"\n",(0,i.jsx)(D,{}),"\n",(0,i.jsx)(n.p,{children:"Before we dive in, let's get you familiar with the GraphiQL interface. Start by pressing the pink play \u25b6\ufe0f icon in the component below:"}),"\n",(0,i.jsx)(x,{queries:"begin"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.p,{children:"You've performed your first query on a live ComposeDB node! Below are the data models the query provided for you is referencing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-GraphQL",children:'type Posts\n    @createModel(accountRelation: LIST, description: "A simple Post")\n    @createIndex(fields: [{ path: "created" }])\n    @createIndex(fields: [{ path: "edited" }])\n    @createIndex(fields: [{ path: "tag" }]) {\n    author: DID! @documentAccount \n    body: String! @string(minLength: 1, maxLength: 100)\n    tag: String! @string(minLength: 1, maxLength: 100)\n    edited: DateTime\n    created: DateTime!\n    profileId: StreamID! @documentReference(model: "BasicProfile")\n    profile: BasicProfile! @relationDocument(property: "profileId")\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The query you performed essentially translates to ",(0,i.jsxs)(n.em,{children:['"give me the first 10 indexed instances of ',(0,i.jsx)(n.code,{children:"Posts"}),' and show me the id, body, tag, created, and author id field values from that model."']})]}),"\n",(0,i.jsx)(n.p,{children:"Easy, right? Let's introduce another model into the mix:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-GraphQL",children:'type BasicProfile @createModel(accountRelation: SINGLE, description: "A basic Profile") {\n author: DID! @documentAccount \n name: String! @string(minLength: 3, maxLength: 100)\n username: String! @string(minLength: 5, maxLength: 255)\n description: String @string(minLength: 3, maxLength: 100)\n gender: String @string(minLength: 3, maxLength: 100)\n emoji: String @string(minLength: 1, maxLength: 2)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Here's a diagram to help you better visualize the relationships between a given user and instances of these two schemas:"}),"\n",(0,i.jsx)("div",{style:{textAlign:"center"},children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"sandbox diagram",src:t(13157).Z+"",width:"2134",height:"820"})})}),"\n",(0,i.jsxs)(n.p,{children:["Continue into the next section to experiment with queries that utilize this ",(0,i.jsx)(n.code,{children:"BasicProfile"})," model."]}),"\n",(0,i.jsx)(n.h3,{id:"reading-profiles",children:"Reading Profiles"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Use the example queries below to access data related to the ",(0,i.jsx)(n.code,{children:"BasicProfile"})," model referenced above. Comments have been left for you above each query to help you understand what the query is requesting."]}),"\n",(0,i.jsx)(x,{queries:"profiles"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.p,{children:'You may have noticed that the fourth tab labeled "WithComments" references a new model we havent discussed yet. Below is the model definition for your reference:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-GraphQL",children:'type Comments\n    @createModel(accountRelation: LIST, description: "A comment on a post")\n    @createIndex(fields: [{ path: "created" }])\n    @createIndex(fields: [{ path: "edited" }]) {\n    comment: String! @string(minLength: 1, maxLength: 100)\n    edited: DateTime\n    created: DateTime!\n    profileId: StreamID! @documentReference(model: "BasicProfile")\n    profile: BasicProfile! @relationDocument(property: "profileId")\n    postId: StreamID! @documentReference(model: "Posts")\n    post: Posts! @relationDocument(property: "postId")\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["We've also defined a field within our ",(0,i.jsx)(n.code,{children:"BasicProfile"})," model that exposes the relationship between a ",(0,i.jsx)(n.code,{children:"BasicProfile"})," instance and all ",(0,i.jsx)(n.code,{children:"Posts"})," that they've created:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-GraphQL",children:'type BasicProfile @loadModel(id: "$PROFILE_ID") {\n    posts: [Posts] @relationFrom(model: "Posts", property: "profileId")\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This is why you're able to access the first 5 ",(0,i.jsx)(n.code,{children:"Posts"})," created by each ",(0,i.jsx)(n.code,{children:"BasicProfile"}),' in the "WithPosts" tab.']}),"\n",(0,i.jsxs)(n.p,{children:["Finally, we've defined a similar field within our ",(0,i.jsx)(n.code,{children:"Posts"})," definition that allows you to access all ",(0,i.jsx)(n.code,{children:"Comments"})," corresponding to that post:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-GraphQL",children:'type Posts @loadModel(id: "$POSTS_ID") {\n    responses: [Comments] @relationFrom(model: "Comments", property: "postId")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"You'll notice that the two sections below also leverage those features by calling on those relationships."}),"\n",(0,i.jsx)(n.h3,{id:"reading-posts",children:"Reading Posts"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Use the example queries below to access data related to the ",(0,i.jsx)(n.code,{children:"Posts"})," model:"]}),"\n",(0,i.jsx)(x,{queries:"posts"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.p,{children:["As mentioned in the previous section, several of the queries left for you ask for items in the ",(0,i.jsx)(n.code,{children:"responses"})," field of ",(0,i.jsx)(n.code,{children:"Posts"})," (which yields ",(0,i.jsx)(n.code,{children:"Comments"})," corresponding to that ",(0,i.jsx)(n.code,{children:"Posts"})," instance)."]}),"\n",(0,i.jsx)(n.h3,{id:"reading-comments",children:"Reading Comments"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Finally, use the example queries below to access data related to the ",(0,i.jsx)(n.code,{children:"Comments"})," model:"]}),"\n",(0,i.jsx)(x,{queries:"comments"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.p,{children:"Great work! You now know how to query based on multiple relationship types, perform filtering and ordering, and even combine filters. Hopefully you've also created a few custom queries of your own to test out."}),"\n",(0,i.jsx)(n.p,{children:"Now that you're familiar with reading data, let's learn how to perform mutations."}),"\n",(0,i.jsx)(n.h2,{id:"writing-data",children:"Writing Data"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"data-models",children:"Data Models"}),"\n",(0,i.jsxs)(n.p,{children:["The following sandbox section will allow you to create Ceramic documents using a different type of query called ",(0,i.jsx)(n.code,{children:"mutations"}),". For this section, you will be using a different model definition. These have been included for your reference below and have already been deployed onto the node this sandbox uses."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-GraphQL",children:'enum Proficiency {\n  Beginner\n  Intermediate\n  Advanced\n  Expert\n}\n\ntype Language {\n  JavaScript: Proficiency\n  Python: Proficiency\n  Rust: Proficiency\n  Java: Proficiency\n  Swift: Proficiency\n  Go: Proficiency\n  Cpp: Proficiency\n  Scala: Proficiency\n  WebAssembly: Proficiency\n  Solidity: Proficiency\n  Other: Proficiency\n}\n\ntype CeramicDev\n  @createModel(\n    accountRelation: SET\n    accountRelationFields: ["context"]\n    description: "A Ceramic developer") {\n  developer: DID! @documentAccount\n  context: String! @string(maxLength: 100)\n  languages: Language!\n  attestations: [AttestToDev] @relationFrom(model: "AttestToDev", property: "attestedProfileId")\n}\n\ntype AttestToDev @createModel(\n    accountRelation: SET\n    accountRelationFields: ["attestedProfileId"]\n    description: "Signals if user attests to another developer profile") {\n  attester: DID! @documentAccount\n  attestedProfileId: StreamID! @documentReference(model: "CeramicDev")\n  profile: CeramicDev! @relationDocument(property: "attestedProfileId")\n  signal: Boolean!\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"You will use this model to self-describe your own development skills, and will therefore require you to alter the given examples to meet your actual abilities."}),"\n",(0,i.jsx)(n.p,{children:"You'll notice several unique qualities within the definitions above:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'Embedded "Language" Type'})}),"\n",(0,i.jsxs)(n.p,{children:["Unlike the definitions used above in the read section, ",(0,i.jsx)(n.code,{children:"CeramicDev"})," makes use of an embedded type called ",(0,i.jsx)(n.code,{children:"Language"}),", which allows developers the ability to use these definitions in their data modeling as if it were a scalar. It's important to note that embedded types also introduce some restrictions - for example, developers impose filtering and ordering based on embedded types."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Proficiency Enum"})}),"\n",(0,i.jsxs)(n.p,{children:["Our embedded ",(0,i.jsx)(n.code,{children:"Language"})," type uses an enum called ",(0,i.jsx)(n.code,{children:"Proficiency"})," that restricts the possible values each key within ",(0,i.jsx)(n.code,{children:"Language"}),' can be assigned to. In our use case, we implemented a simple paradigm that uses a scale of 4 proficiency "levels."']}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'"SET" Account Relation'})}),"\n",(0,i.jsxs)(n.p,{children:["Most importantly, you'll see that ",(0,i.jsx)(n.code,{children:"SET"})," is used to define the relation between the authoring account and the model instance document. Unlike ",(0,i.jsx)(n.code,{children:"LIST"})," (which allows an infinite number of model instance documents to be associated with a given account), ",(0,i.jsx)(n.code,{children:"SET"})," lets developers restrict the number of instance documents to 1 based on the value of a subfield."]}),"\n",(0,i.jsx)(n.p,{children:"A simple way to understand this is to think about reviews on an eCommerce platform. If a customer has purchased a product, the platform should ensure that the customer can only leave 1 review for the product they have purchased."}),"\n",(0,i.jsxs)(n.p,{children:["In ",(0,i.jsx)(n.code,{children:"CeramicDev"}),","]}),"\n",(0,i.jsx)(n.h4,{id:"authentication",children:"Authentication"}),"\n",(0,i.jsx)(n.p,{children:"You will first have to self-authenticate on the Ceramic node this sandbox environment uses. This is required for making mutation queries, whereas you do not have to be authenticated on a given node to read its data. In order to do so, you will need the MetaMask wallet browser extension installed."}),"\n",(0,i.jsxs)(n.p,{children:["Once you're ready, go ahead and press the ",(0,i.jsx)(n.code,{children:"Authenticate on Ceramic"})," button below, and sign the messages within the MetaMask popups."]}),"\n",(0,i.jsx)("div",{style:{height:"100%",width:"100%",margin:"auto"},children:(0,i.jsx)(S,{})}),"\n",(0,i.jsx)(n.p,{children:"Your browser wallet should create a prompt for you that looks something like this:"}),"\n",(0,i.jsx)("div",{style:{textAlign:"center"},children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Sign in prompt",src:t(54097).Z+"",width:"390",height:"643"})})}),"\n",(0,i.jsxs)(n.p,{children:['Notice how there\'s 1 model listed under "Resources" in the prompt - the model listed here is the StreamID of the ',(0,i.jsx)(n.code,{children:"CeramicDev"})," model definition shown above that has already been deployed onto Ceramic. By signing this prompt, you are creating a temporary session that allows the current application to create edits on your behalf ",(0,i.jsx)(n.em,{children:"only"})," to the resources you've granted access to (in this case, our ",(0,i.jsx)(n.code,{children:"CeramicDev"})," schema)."]}),"\n",(0,i.jsx)(n.h3,{id:"creating-a-record",children:"Creating a Record"}),"\n",(0,i.jsxs)(n.p,{children:["Now that you're authenticated, you'll be able to create a ",(0,i.jsx)(n.code,{children:"CeramicDev"})," profile of your own! Be sure to adjust the dummy queries below to meet your unique skill set. You can edit the languages variable and the corresponding proficiency fields for each language that represents your own expertise."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, if you notice that a language like ",(0,i.jsx)(n.code,{children:"Cpp"})," is missing from your mutation and you want to signal that you have ",(0,i.jsx)(n.code,{children:"Intermediate"})," experience, you can create a new line withing your ",(0,i.jsx)(n.code,{children:"languages"})," object and add ",(0,i.jsx)(n.code,{children:"Cpp: Intermediate"}),"."]}),"\n",(0,i.jsx)("div",{style:{height:"60rem",width:"100%",margin:"auto"},children:(0,i.jsx)(q,{queries:"mutations"})}),"\n",(0,i.jsx)(n.h3,{id:"developer-feed",children:"Developer Feed"}),"\n",(0,i.jsxs)(n.p,{children:["Below you'll see the most recent 8 ",(0,i.jsx)(n.code,{children:"CeramicDev"})," records in addition to all verifications that have been issued in relation to that ",(0,i.jsx)(n.code,{children:"CeramicDev"})," profile (these have been filtered to ensure each verification is from a unique profile):"]}),"\n",(0,i.jsx)("div",{style:{height:"100%",width:"100%",margin:"auto",marginBottom:"5%",display:"flex",flexDirection:"row"},children:(0,i.jsx)(E,{})}),"\n",(0,i.jsx)(n.h3,{id:"write-data-in-a-local-environment",children:"Write Data in a Local Environment"}),"\n",(0,i.jsxs)(n.p,{children:["Notice how some of the profiles have obtained verifications? The ability to create an ",(0,i.jsx)(n.code,{children:"AttestToDev"})," instance using this sandbox has been intentionally omitted from the runtime definition used on this page. We've done so to encourage developers to complete this sandbox module by following the steps below that allow you to verify your profile in a local environment."]}),"\n",(0,i.jsx)(n.p,{children:"To get started, clone the extension repository, install your dependencies, and run the local application:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/ceramicstudio/sandbox-extension\ncd sandbox-extension\nnpm install\nnpm run dev\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The operations above will run the extension application in developer mode - go ahead and navigate to ",(0,i.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})," in your browser to start interacting with the application."]}),"\n",(0,i.jsx)(n.p,{children:"Once you have the extension running locally and visible in your browser, you'll be able to sign in using MetaMask. Be sure to use the same address and network you used when authenticating yourself on this page."}),"\n",(0,i.jsxs)(n.p,{children:["Click the ",(0,i.jsx)(n.code,{children:"Sign in with MetaMask"})," button in the upper right-hand corner as the screenshot shows below to get started."]}),"\n",(0,i.jsx)("div",{style:{textAlign:"center"},children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Sign in prompt",src:t(33266).Z+"",width:"991",height:"1080"})})}),"\n",(0,i.jsx)(n.p,{children:"Once authenticated, you'll be able to verify your own profile as well as others. If you've signed in using the same account and network as the one you used on the sandbox page, you should see the profile you just created appended to the right:"}),"\n",(0,i.jsx)("div",{style:{textAlign:"center"},children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"before verifying",src:t(5763).Z+"",width:"1054",height:"828"})})}),"\n",(0,i.jsxs)(n.p,{children:["Notice how your profile does not currently have any unique verifications. You can go ahead and verify by clicking the ",(0,i.jsx)(n.code,{children:"Verify Profile"})," button for that item. You should now see something like this:"]}),"\n",(0,i.jsx)("div",{style:{textAlign:"center"},children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"before verifying",src:t(16458).Z+"",width:"1052",height:"830"})})}),"\n",(0,i.jsx)(n.p,{children:"You can also verify profiles made by other developers that are appended to the left of your screen."}),"\n",(0,i.jsxs)(n.p,{children:["Finally, once you've verified your profile, return back to this page. You should now see your verification(s) counted for each unique verification you issued in your local environment back in the ",(0,i.jsx)(n.a,{href:"./sandbox/#developer-feed",children:"Developer Feed"})]}),"\n",(0,i.jsx)(n.p,{children:"You've done it! You now know how to perform successful read and write queries on a live ComposeDB node!"}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"To begin building with ComposeDB in your local environment using the same data models you just queried, get started with setting up your environment."})]})}function _(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(J,{...e})}):J(e)}},16458:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});const i=t.p+"assets/images/after-verify-a61aff630a061f3d04503edae56691a2.png"},5763:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});const i=t.p+"assets/images/before-verify-9e28f79227da0861748b1a182bfce103.png"},13157:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});const i=t.p+"assets/images/final-diagram-539115bb0083c5b13eec70296c1ec390.png"},33266:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});const i=t.p+"assets/images/sandbox-extension-78cd0758410dff8a385423b1b350a320.png"},54097:(e,n,t)=>{"use strict";t.d(n,{Z:()=>i});const i=t.p+"assets/images/sign-in-d9cfd9293ab6e30266229533622f495e.png"},84955:()=>{}}]);