"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2921],{10865:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=t(11527),s=t(63883);t(37421),t(81779);const o={},a="Interact with data",i={id:"composedb/interact-with-data",title:"Interact with data",description:"The final step of getting started with ComposeDB is interacting with your data using GraphQL. In this guide you will learn how to perform GraphQL queries and mutations using your composite.",source:"@site/docs/composedb/interact-with-data.mdx",sourceDirName:"composedb",slug:"/composedb/interact-with-data",permalink:"/docs/composedb/interact-with-data",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"composedb",previous:{title:"Create your composite",permalink:"/docs/composedb/create-your-composite"},next:{title:"ComposeDB Concepts",permalink:"/docs/composedb/core-concepts"}},d={},c=[{value:"Setup",id:"setup",level:2},{value:"GraphQL Server",id:"graphql-server",level:3},{value:"GraphQL Web UI",id:"graphql-web-ui",level:3},{value:"Queries",id:"queries",level:2},{value:"Mutations",id:"mutations",level:2},{value:"Creating records",id:"creating-records",level:3},{value:"Updating records",id:"updating-records",level:3},{value:"Remove/Restore record from index",id:"removerestore-record-from-index",level:3},{value:"Authentication",id:"authentication",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Related Guides",id:"related-guides",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"interact-with-data",children:"Interact with data"}),"\n",(0,r.jsx)(n.p,{children:"The final step of getting started with ComposeDB is interacting with your data using GraphQL. In this guide you will learn how to perform GraphQL queries and mutations using your composite."}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Want to interact with data using JavaScript instead? See ",(0,r.jsx)(n.a,{href:"/docs/composedb/guides/composedb-client/javascript-client",children:"Client setup"})]})}),"\n",(0,r.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,r.jsx)(n.h3,{id:"graphql-server",children:"GraphQL Server"}),"\n",(0,r.jsxs)(n.p,{children:["To interact with data on the network, start a local GraphQL server by running the command below. Note that you have to provide the ",(0,r.jsx)(n.a,{href:"./set-up-your-environment#generate-your-private-key",children:"private key"})," to your ",(0,r.jsx)(n.code,{children:"did-private-key"})," here \u2014 it is also required for performing mutations, covered below."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"composedb graphql:server --ceramic-url=http://localhost:7007 --graphiql runtime-composite.json --did-private-key=your-private-key --port=5005\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["\u270f\ufe0f ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"Note:"})})," You can customize the port by configuring the ",(0,r.jsx)(n.code,{children:"\u2014-port"})," flag."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The output will display a URL, for example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"GraphQL server is listening on http://localhost:5005/graphql\n"})}),"\n",(0,r.jsx)(n.h3,{id:"graphql-web-ui",children:"GraphQL Web UI"}),"\n",(0,r.jsxs)(n.p,{children:['In your browser, visit the URL that your local GraphQL server is listening on. You will see a simple UI that you can use to easily interact with your data.\nThis UI allows you to run queries by simply writing data queries inside of the editor you see below and pressing the "Play" button to see the results of the query:\n',(0,r.jsx)(n.img,{alt:"GraphQL Web UI",src:t(86251).Z+"",width:"1328",height:"902"})]}),"\n",(0,r.jsx)(n.h2,{id:"queries",children:"Queries"}),"\n",(0,r.jsx)(n.p,{children:"One of the most common data interactions you might want to do with ComposeDB is read records from the graph. Using GraphQL, you can query ComposeDB records indexed by your Ceramic node."}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.a,{href:"/docs/composedb/create-your-composite",children:"Create your composite"})," guide, we fetched two models from the Catalog: ",(0,r.jsx)(n.code,{children:"Post"})," and ",(0,r.jsx)(n.code,{children:"SimpleProfile"}),". Here we will focus on ",(0,r.jsx)(n.code,{children:"Post"})," model. For example, let\u2019s say you want to check the first 2 entries that were indexed on the Post graph. This can be achieved running a query like below and specifying that you want to retrieve first 2 records:"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Query"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"query{\n  postsIndex(first: 2) {\n    edges {\n      node {\n        body\n      }\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should see a response similar to the one below. Here, nodes correspond to stored documents while edges represent the relations between nodes."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Response"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "postsIndex": {\n      "edges": [\n        {\n          "node": {\n            "text": "A Post created using composites and GraphQL"\n          }\n        },\n        {\n          "node": {\n            "text": "This is my second post!"\n          }\n        }\n      ]\n    }\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You have options to retrieve specific records or last ",(0,r.jsx)(n.code,{children:"n"})," indexed records as well. For example, to check the last 3 records, run the query below:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Query:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"query{\n  postsIndex(last: 3) {\n    edges {\n      node {\n        body\n      }\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"mutations",children:"Mutations"}),"\n",(0,r.jsx)(n.p,{children:"There are three types of mutations you can perform on ComposeDB data: creating, and updating records, or change wether the records is indexed or not."}),"\n",(0,r.jsx)(n.h3,{id:"creating-records",children:"Creating records"}),"\n",(0,r.jsx)(n.p,{children:"Let\u2019s say, you would like to create a post and add it to the graph. To do that, you will have to run a mutation as shown below and pass the actual text as a variable:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Query:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"mutation CreateNewPost($i: CreatePostsInput!){\n  createPosts(input: $i){\n    document{\n      id\n      title\n      body\n      tag\n      ranking\n      created_at\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Variables:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "i": {\n    "content": {\n      "title": "New post",\n      "body": "My new post on Ceramic",\n      "tag": "User post",\n      "ranking": 5,\n      "created_at": "2024-12-03T10:15:30Z"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The result of the query above will be a new document with a unique ID and the content you provided:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Response"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "createPosts": {\n      "document": {\n        "id": "kjzl6kcym7w8y5ygh1fyvstbjztd69suybc4ez8bet2hun7jezrc2m0uwg5bm3q",\n        "title": "New post",\n        "body": "My new post on Ceramic",\n        "tag": "User post",\n        "ranking": 5,\n        "created_at": "2024-12-03T10:15:30Z"\n      }\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Stream IDs are unique. The \u201cid\u201d you will see in the response when performing the mutation above will be different. Keep that in mind\nas you follow this guide and update the id to the one that you see in your response."})}),"\n",(0,r.jsx)(n.h3,{id:"updating-records",children:"Updating records"}),"\n",(0,r.jsxs)(n.p,{children:["Now let\u2019s say you want to edit the post you created in the previous step. To update it, you have to run the ",(0,r.jsx)(n.code,{children:"UpdatePost"})," mutation and pass the post\u2019s unique ID along with the updated content as variables."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["You can find your post\u2019s ID in the response after you ran the ",(0,r.jsx)(n.code,{children:"CreateNewPost"})," mutation."]})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Query:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"mutation UpdatePost($i: UpdatePostsInput!) {\n    updatePosts(input: $i) {\n        document {\n            id\n            title\n            body\n            tag\n            ranking\n            created_at\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Variables:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "i": {\n    "id": "kjzl6kcym7w8y5ygh1fyvstbjztd69suybc4ez8bet2hun7jezrc2m0uwg5bm3q",\n    "content": {\n      "title": "New post",\n      "body": "My new post on Ceramic using ComposeDB",\n      "tag": "User post",\n      "ranking": 5,\n      "created_at": "2024-12-03T10:15:30Z"\n    }\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This mutation will update the record with ID ",(0,r.jsx)(n.code,{children:"kjzl6kcym7w8y5ygh1fyvstbjztd69suybc4ez8bet2hun7jezrc2m0uwg5bm3q"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Response:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "updatePosts": {\n      "document": {\n        "id": "kjzl6kcym7w8y5ygh1fyvstbjztd69suybc4ez8bet2hun7jezrc2m0uwg5bm3q",\n        "title": "New post",\n        "body": "My new post on Ceramic using ComposeDB",\n        "tag": "User post",\n        "ranking": 5,\n        "created_at": "2024-12-03T10:15:30Z"\n      }\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"removerestore-record-from-index",children:"Remove/Restore record from index"}),"\n",(0,r.jsxs)(n.p,{children:["If instead of updating the created post record we want to stop indexing said record we would need to  use the ",(0,r.jsx)(n.code,{children:"enableIndexingPost"}),"\nmutation with the ",(0,r.jsx)(n.code,{children:"shouldIndex"})," option set to ",(0,r.jsx)(n.code,{children:"false"}),", or if we want to index an un-indexed record we can call the ",(0,r.jsx)(n.code,{children:"enableIndexingPost"}),"\nmutation with the ",(0,r.jsx)(n.code,{children:"shouldIndex"})," option set to ",(0,r.jsx)(n.code,{children:"true"}),", and the post ID as variable."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Query:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"mutation EnableIndexingPost($i: EnableIndexingPostsInput!) {\n      enableIndexingPosts(input: $i) {\n          document {\n            id\n          }\n        }\n      }\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Variables:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "i": {\n    "id": "kjzl6kcym7w8y5ygh1fyvstbjztd69suybc4ez8bet2hun7jezrc2m0uwg5bm3q",\n    "shouldIndex": false\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This mutation will un-index the record with ID ",(0,r.jsx)(n.code,{children:"kjzl6kcym7w8y5ygh1fyvstbjztd69suybc4ez8bet2hun7jezrc2m0uwg5bm3q"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Response:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "enableIndexingPosts": {\n      "document": null\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,r.jsxs)(n.p,{children:["Although you can query records created by other accounts, you can only perform mutations on records controlled by your account. This guide did not require your authentication because you previously did that in the ",(0,r.jsx)(n.a,{href:"/docs/composedb/set-up-your-environment",children:"Set up your environment"})," guide."]}),"\n",(0,r.jsxs)(n.p,{children:["\ud83d\udd11 ",(0,r.jsx)(n.code,{children:"did-private-key"})," plays a very important role for these kind of mutations - it ensures that only you, the account owner, can make changes to the streams that you created."]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"Congratulations \u2014 you\u2019re on your way to becoming a ComposeDB developer! \ud83d\udd25"}),"\n",(0,r.jsxs)(n.p,{children:["Visit ",(0,r.jsx)(n.a,{href:"/docs/composedb/next-steps",children:"Next Steps"})," for more integration guides and opportunities to contribute to the ComposeDB on Ceramic ecosystem."]}),"\n",(0,r.jsx)(n.h2,{id:"related-guides",children:"Related Guides"}),"\n",(0,r.jsx)(n.p,{children:"For more detailed descriptions and examples, see our advanced guides:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/docs/composedb/guides/composedb-client/user-sessions",children:"Authentication for Mutations"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/docs/composedb/guides/data-interactions/",children:"Data Interactions"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/docs/composedb/guides/data-interactions/queries",children:"Queries"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/docs/composedb/guides/data-interactions/mutations",children:"Mutations"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/docs/composedb/guides/composedb-client/javascript-client",children:"ComposeDB Client setup"})}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},81779:(e,n,t)=>{t.d(n,{Z:()=>a});t(50959);var r=t(45924);const s={tabItem:"tabItem_e7Wc"};var o=t(11527);function a(e){let{children:n,hidden:t,className:a}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,a),hidden:t,children:n})}},37421:(e,n,t)=>{t.d(n,{Z:()=>v});var r=t(50959),s=t(45924),o=t(71988),a=t(28903),i=t(739),d=t(99965),c=t(43251),l=t(76698);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:s}}=e;return{value:n,label:t,attributes:r,default:s}}))}(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const s=(0,a.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,d._X)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(s.location.search);n.set(o,e),s.replace({...s.location,search:n.toString()})}),[o,s])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,o=h(e),[a,d]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:o}))),[c,u]=m({queryString:t,groupId:s}),[g,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,o]=(0,l.Nk)(t);return[s,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:s}),j=(()=>{const e=c??g;return p({value:e,tabValues:o})?e:null})();(0,i.Z)((()=>{j&&d(j)}),[j]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),x(e)}),[u,x,o]),tabValues:o}}var x=t(12049);const j={tabList:"tabList_c3am",tabItem:"tabItem_iDuG"};var b=t(11527);function y(e){let{className:n,block:t,selectedValue:r,selectValue:a,tabValues:i}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),l=e=>{const n=e.currentTarget,t=d.indexOf(n),s=i[t].value;s!==r&&(c(n),a(s))},u=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:o}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>d.push(e),onKeyDown:u,onClick:l,...o,className:(0,s.Z)("tabs__item",j.tabItem,o?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function f(e){let{lazy:n,children:t,selectedValue:s}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function w(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,s.Z)("tabs-container",j.tabList),children:[(0,b.jsx)(y,{...e,...n}),(0,b.jsx)(f,{...e,...n})]})}function v(e){const n=(0,x.Z)();return(0,b.jsx)(w,{...e,children:u(e.children)},String(n))}},86251:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/graphiql-7b3b68ea5dc0a1acf5ab8c22f2129efb.png"},63883:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>a});var r=t(50959);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);