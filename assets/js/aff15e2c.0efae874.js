"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[81],{58435:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>l});var s=i(11527),t=i(63883);const a={},r="Schemas",d={id:"composedb/guides/data-modeling/schemas",title:"Schemas",description:"Learn how to write high-quality GraphQL schemas for your models.",source:"@site/docs/composedb/guides/data-modeling/schemas.mdx",sourceDirName:"composedb/guides/data-modeling",slug:"/composedb/guides/data-modeling/schemas",permalink:"/docs/composedb/guides/data-modeling/schemas",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"composedb",previous:{title:"Introduction to Modeling",permalink:"/docs/composedb/guides/data-modeling/introduction-to-modeling"},next:{title:"Relations",permalink:"/docs/composedb/guides/data-modeling/relations"}},o={},l=[{value:"Overview",id:"overview",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Shapes, Fields, Scalars",id:"shapes-fields-scalars",level:3},{value:"Enums",id:"enums",level:3},{value:"Special Types",id:"special-types",level:3},{value:"Embedded Shapes",id:"embedded-shapes",level:3},{value:"Interfaces",id:"interfaces",level:3},{value:"Directives",id:"directives",level:3},{value:"Type validation directives",id:"type-validation-directives",level:4},{value:"Directives for creating indices",id:"directives-for-creating-indices",level:4},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"schemas",children:"Schemas"}),"\n",(0,s.jsx)(n.p,{children:"Learn how to write high-quality GraphQL schemas for your models."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["ComposeDB models are written in GraphQL using GraphQL Schema Definition Language ",(0,s.jsx)(n.a,{href:"https://graphql.org/learn/schema/",children:"(SDL)"}),". Your schema defines a collection of object types and the relationships between them. Those types will have scalars (values), shapes (key-value mappings), and\xa0lists to describe the structure and validation rules for the model, and use\xa0directives for other metadata information."]}),"\n",(0,s.jsxs)(n.p,{children:["We currently support a subset of SDL\u2019s scalars and directives, but are continually adding more, see the API ",(0,s.jsx)(n.a,{href:"https://composedb.js.org/docs/0.5.x/api/sdl/scalars",children:"reference"})," for a complete list."]}),"\n",(0,s.jsx)(n.h2,{id:"concepts",children:"Concepts"}),"\n",(0,s.jsx)(n.p,{children:"Learn about key concepts for the GraphQL Schema Definition Language."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["On this page, we provide basic info for you to begin writing GraphQL data models. For more complete information on the GraphQL Schema Definition Language, visit the ",(0,s.jsx)(n.a,{href:"https://graphql.org/learn/schema/",children:"GraphQL website"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"shapes-fields-scalars",children:"Shapes, Fields, Scalars"}),"\n",(0,s.jsx)(n.p,{children:"The most basic component in a GraphQL schema is an object type, sometimes called a shape. It simply represents the shape of the data you want to query and its properties, consisting of fields (keys) and scalars (values)."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type EducationModule {\n  module_name: String!\n  module_domain: String\n  number_of_topics_covered: Int!\n  learners_enrolled: [Learner!]!\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Where:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"type"})," defines a new object"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"EducationModule"})," the name given to the object; queryable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"module_name"}),", ",(0,s.jsx)(n.code,{children:"module_domain"}),", ",(0,s.jsx)(n.code,{children:"number_of_topics_covered"})," and ",(0,s.jsx)(n.code,{children:"learners_enrolled"})," are fields in the ",(0,s.jsx)(n.code,{children:"EducationModule"})," type; all fields are queryable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"String!"})," and ",(0,s.jsx)(n.code,{children:"Int!"})," define the data type of the value. By adding ",(0,s.jsx)(n.code,{children:"!"})," to the end of the type declaration, we are telling GraphQL to always return a value when we query this field, which also means that when writing data through a mutation a value is required."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"[Learner!]!"})," defines the data type of the value, but in this case the data type is an array of another type, ",(0,s.jsx)(n.code,{children:"Learner"}),", which is not depicted above. It is required since it includes the ",(0,s.jsx)(n.code,{children:"!"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"enums",children:"Enums"}),"\n",(0,s.jsx)(n.p,{children:"Enums represent the type of a single string value in the schema from a set of\naccepted values, for example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"enum NoteStatus {\n  DEFAULT\n  IMPORTANT\n  ARCHIVE\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"special-types",children:"Special Types"}),"\n",(0,s.jsxs)(n.p,{children:["GraphQL reserves the use of two special type names, ",(0,s.jsx)(n.code,{children:"query"})," and ",(0,s.jsx)(n.code,{children:"mutation"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Do not"})," name any of your own custom types, which are the majority of the types you will work with, the same as these two special types."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"query"})," type is used as the entry point when retrieving data using GraphQL"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mutation"})," type is used as the entry point when writing or changing data using GraphQL"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"embedded-shapes",children:"Embedded Shapes"}),"\n",(0,s.jsxs)(n.p,{children:["Our first shape, ",(0,s.jsx)(n.code,{children:"EducationModule"}),", makes use of an embedded shape called ",(0,s.jsx)(n.code,{children:"Learner"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type EducationModule {\n  module_name: String!\n  module_domain: String\n  number_of_topics_covered: Int!\n  learners_enrolled: [Learner!]!\n}\n\ntype Learner {\n  first_name: String!\n  last_name: String!\n  username: String!\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Learner"})," is not anything different from ",(0,s.jsx)(n.code,{children:"EducationModule"})," in terms of how it is defined. It does contain different fields, but it is just a GraphQL shape that can be used like any other shape."]}),"\n",(0,s.jsx)(n.p,{children:"\ud83d\udca1 For this to work, you will want to define both shapes inside the same GraphQL file when writing ComposeDB schemas."}),"\n",(0,s.jsx)(n.h3,{id:"interfaces",children:"Interfaces"}),"\n",(0,s.jsxs)(n.p,{children:["Interfaces are abstract models defining common fields for other models. Objects can implement these interfaces to ensure they match their constraints and provide ",(0,s.jsx)(n.a,{href:"/docs/composedb/guides/data-modeling/relations#using-interfaces",children:"additional relations options"}),", for example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'interface TextContent @createModel(description: "Required text content interface") {\n  text: String! @string(maxLength: 10000)\n}\n\ntype Page implements TextContent @createModel(description: "Page model") {\n  title: String @string(maxLength: 100)\n  text: String! @string(maxLength: 10000)\n}\n\ntype Post implements TextContent @createModel(description: "Post model") {\n  title: String! @string(maxLength: 100)\n  text: String! @string(maxLength: 10000)\n  createdAt: DateTime!\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"directives",children:"Directives"}),"\n",(0,s.jsxs)(n.p,{children:["ComposeDB comes with ",(0,s.jsx)(n.a,{href:"https://composedb.js.org/docs/0.7.x/api/sdl/directives",children:"a list of different directives"})," that can be used to create or load data models, define type validation rules, and create indices\nfor specific fields which enables them to be used for document filtering and sorting."]}),"\n",(0,s.jsx)(n.h4,{id:"type-validation-directives",children:"Type validation directives"}),"\n",(0,s.jsx)(n.p,{children:"Directives are keywords that add validation rules to a scalar. Not all scalars need to have directives, though Strings are required to have a maxLength. Let\u2019s add directives to the two shapes used in this guide:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type EducationModule {\n  module_name: String! @string(maxLength: 50)\n  module_domain: String @string(minLength: 5, maxLength: 50)\n  number_of_topics_covered: Int! @int(min: 1, max: 100)\n  learners_enrolled: [Learner!]! @list(maxLength: 30)\n}\n\ntype Learner {\n  first_name: String! @string(minLength: 10, maxLength: 30)\n  last_name: String! @string(maxLength: 30)\n  username: String! @string(maxLength: 32) @immutable\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Where:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Each directive is declared using the ",(0,s.jsx)(n.code,{children:"@"})," symbol"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@string"})," adds validation rules to values that are strings, e.g. minimum and maximum length"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@int"})," adds validation rules to values that are integers, e.g. minimum and maximum values"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@list"})," adds validation rules to an array, e.g. maximum length"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"@immutable"})," ensures that after a field value is set it won't be updated"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"directives-for-creating-indices",children:"Directives for creating indices"}),"\n",(0,s.jsxs)(n.p,{children:["To be able to filter the query results by a specific field and sort them in a specific order,\nyou are required to create indices for corresponding fields. In ComposeDB indices work the\nsame way as in traditional databases - they speed up the querying processes. You can create indices\nfor specific fields using ",(0,s.jsx)(n.code,{children:"@createIndex"})," directive as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'type Posts\n  @createModel(accountRelation: LIST, description: "A simple Post")\n  @createIndex(fields: [{ path: "title" }])\n  @createIndex(fields: [{ path: "tag" }])\n  @createIndex(fields: [{ path: "created_at" }]) {\n  title: String! @string(minLength: 1, maxLength: 100)\n  body: String! @string(minLength: 1, maxLength: 100)\n  tag: String! @string(minLength: 1, maxLength: 100)\n  ranking: Int!\n  created_at: DateTime!\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The example above will create indices for the fields ",(0,s.jsx)(n.code,{children:"title"}),", ",(0,s.jsx)(n.code,{children:"tag"})," and ",(0,s.jsx)(n.code,{children:"created_at"}),", and will enable you to filter the documents based on the values in these fields as well as sort the results in a specified order."]}),"\n",(0,s.jsx)(n.p,{children:"You can create indices for individual or multiple fields in your data models."}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.p,{children:["Learn how to add ",(0,s.jsx)(n.a,{href:"/docs/composedb/guides/data-modeling/relations",children:(0,s.jsx)(n.strong,{children:"Relations"})})," to your schema ",(0,s.jsx)(n.a,{href:"/docs/composedb/guides/data-modeling/relations",children:(0,s.jsx)(n.strong,{children:"\u2192"})})]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},63883:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>r});var s=i(50959);const t={},a=s.createContext(t);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);